package Analizadores;

import java.util.*; 
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;
import Estructuras.NodoAST;

parser code
{:  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Instruccion> resultado = new LinkedList<>();
    NodoAST raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}

action code
{:

:} 
terminal String tId,tIn,tPie,tBarplot,tMatrix,tList,tDo,tC,tWhile,tReturn,tFor,tIf,tElse,tModulo,tDosPuntos,tPunto,tLlaveA,tPuntoComa,tLlaveC,tCadena,tCorcheA,tCorcheC;
terminal String UMENOS,tDoble,tFunction,tIgualIgual,tEntero,tTrue,tFalse,tParA,tParC,tCaracter,tIgual,tDifQ,tOr,tAnd,tXor,tComa,tSuma,tResta,tMult,tDiv,tPow,tMayorQ,tMenorQ; 
terminal String tPrint;

non terminal Expresion E,LLAMADA_FUNCION;
non terminal Instruccion INSTRUCCION;
non terminal LinkedList<Expresion> LISTAEXPR;
non terminal LinkedList<Instruccion> LISTA,LISTAINSTRUCCIONES;
non terminal Instruccion ASIGNACION,DECLARACION,IMPRIMIR,FOR,SI,SUBIF,WHILE,DO_WHILE,FUNCION_DEFINIDA,RETURN;
non terminal LinkedList<SubIf> instrucciones_elseif;
non terminal SubIf instruccion_elseif;
non terminal SubIf instruccion_else;
non terminal SubIf instruccion_if;

precedence left tSuma, tResta,UMENOS;
precedence left tMult, tDiv,tModulo, tIgualIgual;
precedence left tPow, tMayorQ,tMenorQ;
precedence left tAnd, tOr,tXor,tDifQ;
precedence right UMENOS,tIgual; 

start with LISTA;

LISTA ::= tLlaveA LISTAINSTRUCCIONES:li tLlaveC {:
            parser.resultado=li;
        :}
        ;

LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES:li INSTRUCCION:ins {:
                        RESULT=li;
                        RESULT.add(ins);
                    :}
                    | INSTRUCCION:ins {:
                        RESULT = new LinkedList<>();
                        RESULT.add(ins);
                    :}
                    ;
INSTRUCCION ::= DECLARACION:a {:RESULT=a;:}
                | IMPRIMIR:a {:RESULT=a;:}
                | SI:a {:RESULT=a;:}
                | ASIGNACION:a {:RESULT=a;:}
                | WHILE:a {:RESULT=a;:}
                | DO_WHILE:a {:RESULT=a;:}
                | LLAMADA_FUNCION:exp {:RESULT=(Instruccion) exp;:}
                | FUNCION_DEFINIDA: a {:RESULT=(Instruccion) a;:}
                | RETURN:a {:RESULT=a;:}
                | FOR:a {:RESULT=a;:}
            ;

FOR ::= tFor tParA tId:a tIn E:val tParC tLlaveA LISTAINSTRUCCIONES:lista tLlaveC {:RESULT=new For(a,val,lista);:}
    ;
RETURN ::= tReturn E:a tPuntoComa {:RESULT=new Return(a);:};
LISTAEXPR ::= LISTAEXPR:li tComa E:a {:
                    RESULT=li;
                    RESULT.add(a);
                :}
                | E:a {:
                    RESULT = new LinkedList<>();
                    RESULT.add(a);
                :}
                ;
LLAMADA_FUNCION  ::= tId:id tParA LISTAEXPR:e1 tParC {:RESULT = new LlamadaFuncion(id,e1);:}
                   | tC tParA LISTAEXPR:el tParC {:RESULT = new LlamadaFuncion("c",el);:}
                   | tPie tParA LISTAEXPR:el tParC {:RESULT = new LlamadaFuncion("pie",el);:}
                   | tBarplot tParA LISTAEXPR:el tParC {:RESULT = new LlamadaFuncion("barras",el);:}
                   | tList tParA LISTAEXPR:el tParC {:RESULT = new LlamadaFuncion("list",el);:}
                   | tMatrix tParA LISTAEXPR:el tParC {:RESULT = new LlamadaFuncion("matrix",el);:}
                ;
FUNCION_DEFINIDA ::= tId:id tIgual tFunction tParA  LISTAEXPR:exp tParC tLlaveA LISTAINSTRUCCIONES:li tLlaveC  {:RESULT=new FuncionPropia(id,Simbolo.EnumTipoDato.FUNCION,li,exp);:}
                    ;
/*FUNCION_DEFINIDA_2 ::= tFunction tParA  LISTAEXPR:exp tParC tLlaveA LISTAINSTRUCCIONES:li tLlaveC {:RESULT=new FuncionPropia(li,exp);:}
                    | tParA LISTAEXPR:exp tParC tIgual tMayorQ tLlaveA LISTAINSTRUCCIONES:li tLlaveC {:RESULT=new FuncionPropia(li,exp);:}
                    ;*/
WHILE ::= tWhile tParA E:a tParC tLlaveA LISTAINSTRUCCIONES:li tLlaveC {:RESULT=new While((Operacion)a,li);:};

DO_WHILE ::= tDo tLlaveA LISTAINSTRUCCIONES:li tLlaveC tWhile tParA E:a tParC tPuntoComa {:RESULT=new While((Operacion)a,li);:};

SI ::= 
        instruccion_if:a {:RESULT=new If(a);:}
      | instruccion_if:a instrucciones_elseif:b {:RESULT=new If(a,b);:}
      | instruccion_if:a instrucciones_elseif:b instruccion_else:c {:RESULT=new If(a,b,c);:}
      | instruccion_if:a instruccion_else:b {:RESULT=new If(a,b);:}
;
instruccion_if ::= 
      tIf tParA E:a tParC tLlaveA LISTAINSTRUCCIONES:b tLlaveC {:RESULT=new SubIf((Operacion)a,b);:}
;

instrucciones_elseif ::= 
        instrucciones_elseif:a instruccion_elseif:b{:RESULT=a; RESULT.add(b);:}
      | instruccion_elseif:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
; 

instruccion_elseif ::= 
        tElse tIf tParA E:a tParC tLlaveA LISTAINSTRUCCIONES:b tLlaveC {:RESULT=new SubIf((Operacion)a,b);:}
;

instruccion_else ::= 
        tElse tLlaveA LISTAINSTRUCCIONES:a tLlaveC {:RESULT=new SubIf(a);:}
;

IMPRIMIR ::= tPrint tParA E:exp tParC tPuntoComa{: RESULT=new Imprimir(exp);:};

DECLARACION ::= tId:id tIgual E:exp tPuntoComa{:RESULT= new Declaracion(id,exp);:}
              | tPunto tId:id tIgual E:exp tPuntoComa{:RESULT= new Declaracion(id,exp);:}
              | tId:id tCorcheA E:a tCorcheC tIgual E:exp tPuntoComa{:RESULT=new Declaracion(id,a,exp);:}
            ;
ASIGNACION ::=  tId:id tCorcheA E:a tComa E:b tCorcheC tIgual E:exp tPuntoComa{:RESULT=new Asignacion(id,a,b,exp,Operacion.Tipo_operacion.MODIFICACION_MATRIZ);:}
                | tId:id tCorcheA E:a tComa tCorcheC tIgual E:exp tPuntoComa{:RESULT=new Asignacion(id,a,null,exp,Operacion.Tipo_operacion.MODIFICACION_FILA_MATRIZ);:}
                | tId:id tCorcheA tComa E:b tCorcheC tIgual E:exp tPuntoComa{:RESULT=new Asignacion(id,null,b,exp,Operacion.Tipo_operacion.MODIFICACION_COLUMNA_MATRIZ);:}
                | tId:a tCorcheA  tCorcheA E:b tCorcheC tCorcheC tIgual E:exp tPuntoComa{:RESULT=new Asignacion(a,b,exp,Operacion.Tipo_operacion.IDENTIFICADOR_POS_ARRAY_LIST);:}
            ;
E ::= tResta E:a{:RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);:}%prec UMENOS 
    | E:a tModulo E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);:}     
    | E:a tSuma E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);:}     
    | E:a tResta E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);:}
    | E:a tMult E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);:}
    | E:a tDiv E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);:}
    | E:a tPow E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);:}  
    | E:a tIgualIgual E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);:} 
    | E:a tMenorQ E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);:}  
    | E:a tMayorQ E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);:} 
    | E:a tMenorQ tIgual E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);:}  
    | E:a tMayorQ tIgual E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);:}
    | E:a tDifQ tIgual E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);:} 
    | E:a tAnd tAnd E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);:}
    | E:a tOr E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);:}
    | E:a tDifQ E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOT);:}
    | E:a tXor E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);:}
    | tParA E:a tParC {:RESULT=a;:}
    | tId:a tCorcheA  tCorcheA E:b tCorcheC tCorcheC {:RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR_POS_ARRAY_LIST,b);:}
    | tId:a tCorcheA E:b tCorcheC {:RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR_POS_ARRAY,b);:}
    | tId:a tCorcheA E:b tCorcheC tCorcheA E:c tCorcheC tCorcheA E:d tCorcheC {:RESULT=new Estructura(a,b,c,d,Tipo_operacion.ARRAY_3);:}
    | tId:a tCorcheA E:b tComa E:c tCorcheC {:RESULT=new Estructura(a,b,c,Tipo_operacion.IDENTIFICADOR_POS_ARRAY_MATRIX);:}
    | tId:a tCorcheA E:b tComa tCorcheC {:RESULT=new Estructura(a,b,Tipo_operacion.DEV_FILA);:}
    | tId:a tCorcheA tComa E:b tCorcheC {:RESULT=new Estructura(a,b,Tipo_operacion.DEV_COLUMNA);:}
    | tId:a {:RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);:}
    | tEntero:a {:RESULT=new Operacion(a,Tipo_operacion.NUMERO);:}
    | tTrue {:RESULT=new Operacion("true",Tipo_operacion.TRUE);:}
    | tFalse {:RESULT=new Operacion("false",Tipo_operacion.FALSE);:}
    | tDoble:a {:RESULT=new Operacion(a,Tipo_operacion.NUMERO);:}
    | tCadena:a {:RESULT=new Operacion(a,Tipo_operacion.CADENA);:}
    | LLAMADA_FUNCION:a {:RESULT=a;:}
    | FUNCION_DEFINIDA:a {:RESULT=(Expresion)a;:}
    ;