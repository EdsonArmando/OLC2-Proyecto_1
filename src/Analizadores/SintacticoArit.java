
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;
import Estructuras.NodoAST;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoArit extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Syma.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoArit() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoArit(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoArit(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\020\005\000\002\005\005\000\002\005" +
    "\003\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\017\013\000\002\015\011\000\002\016\013\000\002" +
    "\013\003\000\002\013\004\000\002\013\005\000\002\013" +
    "\004\000\002\024\011\000\002\021\004\000\002\021\003" +
    "\000\002\022\012\000\002\023\006\000\002\012\007\000" +
    "\002\011\006\000\002\011\007\000\002\011\011\000\002" +
    "\010\013\000\002\010\012\000\002\010\012\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\006\000\002\002\006\000\002\002\006\000\002\002" +
    "\006\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\006\000\002\002\010\000" +
    "\002\002\007\000\002\002\007\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\032\004\033\007\011\010\007\011\012\012" +
    "\027\013\034\014\005\015\010\016\015\020\031\024\004" +
    "\062\026\001\002\000\004\004\267\001\002\000\004\042" +
    "\264\001\002\000\036\002\ufffe\004\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\020" +
    "\ufffe\024\ufffe\027\ufffe\062\ufffe\001\002\000\004\042\261" +
    "\001\002\000\004\042\253\001\002\000\004\042\250\001" +
    "\002\000\004\042\245\001\002\000\036\002\ufff6\004\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\020\ufff6\024\ufff6\027\ufff6\062\ufff6\001\002" +
    "\000\036\002\ufff9\004\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\024\ufff9" +
    "\027\ufff9\062\ufff9\001\002\000\034\004\046\007\011\010" +
    "\007\011\012\012\027\014\005\030\045\034\043\037\051" +
    "\040\053\041\044\042\052\054\050\001\002\000\036\002" +
    "\ufffd\004\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\020\ufffd\024\ufffd\027\ufffd\062" +
    "\ufffd\001\002\000\036\002\ufff5\004\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\020" +
    "\ufff5\024\ufff5\027\ufff5\062\ufff5\001\002\000\034\002\000" +
    "\004\033\007\011\010\007\011\012\012\027\013\034\014" +
    "\005\015\010\016\015\020\031\024\004\062\026\001\002" +
    "\000\036\002\ufffc\004\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\024\ufffc" +
    "\027\ufffc\062\ufffc\001\002\000\036\002\ufff7\004\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\024\ufff7\027\ufff7\062\ufff7\001\002\000" +
    "\040\002\uffe8\004\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\225\024" +
    "\uffe8\027\uffe8\062\uffe8\001\002\000\036\002\ufffa\004\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\020\ufffa\024\ufffa\027\ufffa\062\ufffa\001\002" +
    "\000\036\002\ufff8\004\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\024\ufff8" +
    "\027\ufff8\062\ufff8\001\002\000\004\042\217\001\002\000" +
    "\004\042\214\001\002\000\036\002\ufffb\004\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\020\ufffb\024\ufffb\027\ufffb\062\ufffb\001\002\000\004" +
    "\042\206\001\002\000\004\002\205\001\002\000\010\031" +
    "\154\042\126\045\155\001\002\000\004\025\035\001\002" +
    "\000\032\004\033\007\011\010\007\011\012\012\027\013" +
    "\034\014\005\015\010\016\015\020\031\024\004\062\026" +
    "\001\002\000\034\004\033\007\011\010\007\011\012\012" +
    "\027\013\034\014\005\015\010\016\015\020\031\024\004" +
    "\027\040\062\026\001\002\000\036\002\uffff\004\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\016\uffff\020\uffff\024\uffff\027\uffff\062\uffff\001\002\000" +
    "\004\015\041\001\002\000\004\042\042\001\002\000\034" +
    "\004\046\007\011\010\007\011\012\012\027\014\005\030" +
    "\045\034\043\037\051\040\053\041\044\042\052\054\050" +
    "\001\002\000\044\022\uffbe\026\uffbe\032\uffbe\036\uffbe\043" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\001" +
    "\002\000\044\022\uffbf\026\uffbf\032\uffbf\036\uffbf\043\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002" +
    "\000\044\022\uffbd\026\uffbd\032\uffbd\036\uffbd\043\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000" +
    "\052\022\uffc2\026\uffc2\031\124\032\uffc2\036\uffc2\042\126" +
    "\043\uffc2\045\125\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\001\002\000\044\022\uffbb\026\uffbb\032\uffbb\036" +
    "\uffbb\043\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\001\002\000\034\004\046\007\011\010\007\011\012" +
    "\012\027\014\005\030\045\034\043\037\051\040\053\041" +
    "\044\042\052\054\050\001\002\000\044\022\uffc1\026\uffc1" +
    "\032\uffc1\036\uffc1\043\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\001\002\000\034\004\046\007\011\010" +
    "\007\011\012\012\027\014\005\030\045\034\043\037\051" +
    "\040\053\041\044\042\052\054\050\001\002\000\044\022" +
    "\uffc0\026\uffc0\032\uffc0\036\uffc0\043\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000\044\022\uffbc" +
    "\026\uffbc\032\uffbc\036\uffbc\043\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\001\002\000\036\022\072\036" +
    "\070\043\064\046\073\047\067\050\057\051\060\053\063" +
    "\054\062\055\066\056\071\057\061\060\065\061\056\001" +
    "\002\000\036\004\046\007\011\010\007\011\012\012\027" +
    "\014\005\030\045\034\043\037\051\040\053\041\044\042" +
    "\052\045\116\054\050\001\002\000\004\050\114\001\002" +
    "\000\034\004\046\007\011\010\007\011\012\012\027\014" +
    "\005\030\045\034\043\037\051\040\053\041\044\042\052" +
    "\054\050\001\002\000\034\004\046\007\011\010\007\011" +
    "\012\012\027\014\005\030\045\034\043\037\051\040\053" +
    "\041\044\042\052\054\050\001\002\000\034\004\046\007" +
    "\011\010\007\011\012\012\027\014\005\030\045\034\043" +
    "\037\051\040\053\041\044\042\052\054\050\001\002\000" +
    "\034\004\046\007\011\010\007\011\012\012\027\014\005" +
    "\030\045\034\043\037\051\040\053\041\044\042\052\054" +
    "\050\001\002\000\004\026\107\001\002\000\036\004\046" +
    "\007\011\010\007\011\012\012\027\014\005\030\045\034" +
    "\043\037\051\040\053\041\044\042\052\045\104\054\050" +
    "\001\002\000\034\004\046\007\011\010\007\011\012\012" +
    "\027\014\005\030\045\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\034\004\046\007\011\010" +
    "\007\011\012\012\027\014\005\030\045\034\043\037\051" +
    "\040\053\041\044\042\052\054\050\001\002\000\034\004" +
    "\046\007\011\010\007\011\012\012\027\014\005\030\045" +
    "\034\043\037\051\040\053\041\044\042\052\054\050\001" +
    "\002\000\034\004\046\007\011\010\007\011\012\012\027" +
    "\014\005\030\045\034\043\037\051\040\053\041\044\042" +
    "\052\054\050\001\002\000\034\004\046\007\011\010\007" +
    "\011\012\012\027\014\005\030\045\034\043\037\051\040" +
    "\053\041\044\042\052\054\050\001\002\000\036\004\046" +
    "\007\011\010\007\011\012\012\027\014\005\030\045\034" +
    "\043\037\051\040\053\041\044\042\052\045\074\054\050" +
    "\001\002\000\034\004\046\007\011\010\007\011\012\012" +
    "\027\014\005\030\045\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\044\022\uffc9\026\uffc9\032" +
    "\uffc9\036\uffc9\043\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\001\002\000\044\022\uffcc\026\uffcc\032\uffcc" +
    "\036\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\001\002\000\044\022\uffd7\026\uffd7\032\uffd7\036" +
    "\uffd7\043\uffd7\046\073\047\067\050\057\051\060\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\061\060\065\061" +
    "\056\001\002\000\044\022\uffd3\026\uffd3\032\uffd3\036\uffd3" +
    "\043\uffd3\046\073\047\067\050\057\051\060\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\057\061\060\065\061\056" +
    "\001\002\000\044\022\uffd1\026\uffd1\032\uffd1\036\uffd1\043" +
    "\uffd1\046\073\047\067\050\057\051\060\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\061\060\065\061\056\001" +
    "\002\000\044\022\uffca\026\uffca\032\uffca\036\uffca\043\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001\002" +
    "\000\044\022\uffd4\026\uffd4\032\uffd4\036\uffd4\043\uffd4\046" +
    "\073\047\067\050\057\051\060\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\061\060\065\061\056\001\002\000" +
    "\034\004\046\007\011\010\007\011\012\012\027\014\005" +
    "\030\045\034\043\037\051\040\053\041\044\042\052\054" +
    "\050\001\002\000\044\022\uffcf\026\uffcf\032\uffcf\036\uffcf" +
    "\043\uffcf\046\073\047\067\050\057\051\060\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\001\002\000\044\022\uffcd\026\uffcd\032\uffcd\036\uffcd\043" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001" +
    "\002\000\036\002\uffe9\004\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\024" +
    "\uffe9\027\uffe9\062\uffe9\001\002\000\044\022\072\026\uffd6" +
    "\032\uffd6\036\070\043\uffd6\046\073\047\067\050\057\051" +
    "\060\052\uffd6\053\uffd6\054\uffd6\055\066\056\071\057\061" +
    "\060\065\061\056\001\002\000\044\022\072\026\uffd5\032" +
    "\uffd5\036\070\043\uffd5\046\073\047\067\050\057\051\060" +
    "\052\uffd5\053\uffd5\054\uffd5\055\066\056\071\057\061\060" +
    "\065\061\056\001\002\000\044\022\uffd2\026\uffd2\032\uffd2" +
    "\036\uffd2\043\uffd2\046\073\047\067\050\057\051\060\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\001\002\000\044\022\uffc8\026\uffc8\032\uffc8\036" +
    "\uffc8\043\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\001\002\000\034\004\046\007\011\010\007\011\012" +
    "\012\027\014\005\030\045\034\043\037\051\040\053\041" +
    "\044\042\052\054\050\001\002\000\044\022\uffcb\026\uffcb" +
    "\032\uffcb\036\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\001\002\000\034\004\046\007\011\010" +
    "\007\011\012\012\027\014\005\030\045\034\043\037\051" +
    "\040\053\041\044\042\052\054\050\001\002\000\044\022" +
    "\uffd0\026\uffd0\032\uffd0\036\uffd0\043\uffd0\046\073\047\067" +
    "\050\057\051\060\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\001\002\000\044\022\uffce" +
    "\026\uffce\032\uffce\036\uffce\043\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\001\002\000\036\022\072\036" +
    "\070\043\122\046\073\047\067\050\057\051\060\053\063" +
    "\054\062\055\066\056\071\057\061\060\065\061\056\001" +
    "\002\000\044\022\uffc7\026\uffc7\032\uffc7\036\uffc7\043\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002" +
    "\000\044\022\uffd8\026\uffd8\032\uffd8\036\uffd8\043\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002\000" +
    "\036\004\046\007\011\010\007\011\012\012\027\014\005" +
    "\030\045\034\043\037\051\040\053\041\044\042\052\052" +
    "\143\054\050\001\002\000\004\035\134\001\002\000\034" +
    "\004\046\007\011\010\007\011\012\012\027\014\005\030" +
    "\045\034\043\037\051\040\053\041\044\042\052\054\050" +
    "\001\002\000\006\043\132\052\131\001\002\000\040\022" +
    "\072\036\070\043\ufff2\046\073\047\067\050\057\051\060" +
    "\052\ufff2\053\063\054\062\055\066\056\071\057\061\060" +
    "\065\061\056\001\002\000\034\004\046\007\011\010\007" +
    "\011\012\012\027\014\005\030\045\034\043\037\051\040" +
    "\053\041\044\042\052\054\050\001\002\000\100\002\ufff1" +
    "\004\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\020\ufff1\022\ufff1\024\ufff1\026\ufff1" +
    "\027\ufff1\032\ufff1\036\ufff1\043\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000\040\022" +
    "\072\036\070\043\ufff3\046\073\047\067\050\057\051\060" +
    "\052\ufff3\053\063\054\062\055\066\056\071\057\061\060" +
    "\065\061\056\001\002\000\004\042\135\001\002\000\034" +
    "\004\046\007\011\010\007\011\012\012\027\014\005\030" +
    "\045\034\043\037\051\040\053\041\044\042\052\054\050" +
    "\001\002\000\006\043\137\052\131\001\002\000\004\025" +
    "\140\001\002\000\032\004\033\007\011\010\007\011\012" +
    "\012\027\013\034\014\005\015\010\016\015\020\031\024" +
    "\004\062\026\001\002\000\034\004\033\007\011\010\007" +
    "\011\012\012\027\013\034\014\005\015\010\016\015\020" +
    "\031\024\004\027\142\062\026\001\002\000\100\002\uffeb" +
    "\004\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\020\uffeb\022\uffeb\024\uffeb\026\uffeb" +
    "\027\uffeb\032\uffeb\036\uffeb\043\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000\034\004" +
    "\046\007\011\010\007\011\012\012\027\014\005\030\045" +
    "\034\043\037\051\040\053\041\044\042\052\054\050\001" +
    "\002\000\040\022\072\032\145\036\070\046\073\047\067" +
    "\050\057\051\060\052\146\053\063\054\062\055\066\056" +
    "\071\057\061\060\065\061\056\001\002\000\044\022\uffc6" +
    "\026\uffc6\032\uffc6\036\uffc6\043\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\001\002\000\036\004\046\007" +
    "\011\010\007\011\012\012\027\014\005\030\045\032\147" +
    "\034\043\037\051\040\053\041\044\042\052\054\050\001" +
    "\002\000\044\022\uffc4\026\uffc4\032\uffc4\036\uffc4\043\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002" +
    "\000\036\022\072\032\151\036\070\046\073\047\067\050" +
    "\057\051\060\053\063\054\062\055\066\056\071\057\061" +
    "\060\065\061\056\001\002\000\044\022\uffc5\026\uffc5\032" +
    "\uffc5\036\uffc5\043\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\001\002\000\036\022\072\032\153\036\070" +
    "\046\073\047\067\050\057\051\060\053\063\054\062\055" +
    "\066\056\071\057\061\060\065\061\056\001\002\000\044" +
    "\022\uffc3\026\uffc3\032\uffc3\036\uffc3\043\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002\000\036\004" +
    "\046\007\011\010\007\011\012\012\027\014\005\030\045" +
    "\034\043\037\051\040\053\041\044\042\052\052\160\054" +
    "\050\001\002\000\036\004\046\007\011\010\007\011\012" +
    "\012\027\014\005\030\045\034\043\035\134\037\051\040" +
    "\053\041\044\042\052\054\050\001\002\000\036\022\072" +
    "\026\157\036\070\046\073\047\067\050\057\051\060\053" +
    "\063\054\062\055\066\056\071\057\061\060\065\061\056" +
    "\001\002\000\036\002\uffde\004\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde" +
    "\024\uffde\027\uffde\062\uffde\001\002\000\034\004\046\007" +
    "\011\010\007\011\012\012\027\014\005\030\045\034\043" +
    "\037\051\040\053\041\044\042\052\054\050\001\002\000" +
    "\040\022\072\032\162\036\070\046\073\047\067\050\057" +
    "\051\060\052\163\053\063\054\062\055\066\056\071\057" +
    "\061\060\065\061\056\001\002\000\004\045\175\001\002" +
    "\000\036\004\046\007\011\010\007\011\012\012\027\014" +
    "\005\030\045\032\164\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\004\045\172\001\002\000" +
    "\036\022\072\032\166\036\070\046\073\047\067\050\057" +
    "\051\060\053\063\054\062\055\066\056\071\057\061\060" +
    "\065\061\056\001\002\000\004\045\167\001\002\000\034" +
    "\004\046\007\011\010\007\011\012\012\027\014\005\030" +
    "\045\034\043\037\051\040\053\041\044\042\052\054\050" +
    "\001\002\000\036\022\072\026\171\036\070\046\073\047" +
    "\067\050\057\051\060\053\063\054\062\055\066\056\071" +
    "\057\061\060\065\061\056\001\002\000\036\002\uffdb\004" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\024\uffdb\027\uffdb\062\uffdb\001" +
    "\002\000\034\004\046\007\011\010\007\011\012\012\027" +
    "\014\005\030\045\034\043\037\051\040\053\041\044\042" +
    "\052\054\050\001\002\000\036\022\072\026\174\036\070" +
    "\046\073\047\067\050\057\051\060\053\063\054\062\055" +
    "\066\056\071\057\061\060\065\061\056\001\002\000\036" +
    "\002\uffda\004\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\020\uffda\024\uffda\027\uffda" +
    "\062\uffda\001\002\000\034\004\046\007\011\010\007\011" +
    "\012\012\027\014\005\030\045\034\043\037\051\040\053" +
    "\041\044\042\052\054\050\001\002\000\036\022\072\026" +
    "\177\036\070\046\073\047\067\050\057\051\060\053\063" +
    "\054\062\055\066\056\071\057\061\060\065\061\056\001" +
    "\002\000\036\002\uffdc\004\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\024" +
    "\uffdc\027\uffdc\062\uffdc\001\002\000\036\022\072\032\201" +
    "\036\070\046\073\047\067\050\057\051\060\053\063\054" +
    "\062\055\066\056\071\057\061\060\065\061\056\001\002" +
    "\000\004\045\202\001\002\000\034\004\046\007\011\010" +
    "\007\011\012\012\027\014\005\030\045\034\043\037\051" +
    "\040\053\041\044\042\052\054\050\001\002\000\036\022" +
    "\072\026\204\036\070\046\073\047\067\050\057\051\060" +
    "\053\063\054\062\055\066\056\071\057\061\060\065\061" +
    "\056\001\002\000\036\002\uffd9\004\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020" +
    "\uffd9\024\uffd9\027\uffd9\062\uffd9\001\002\000\004\002\001" +
    "\001\002\000\034\004\046\007\011\010\007\011\012\012" +
    "\027\014\005\030\045\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\036\022\072\036\070\043" +
    "\210\046\073\047\067\050\057\051\060\053\063\054\062" +
    "\055\066\056\071\057\061\060\065\061\056\001\002\000" +
    "\004\025\211\001\002\000\032\004\033\007\011\010\007" +
    "\011\012\012\027\013\034\014\005\015\010\016\015\020" +
    "\031\024\004\062\026\001\002\000\034\004\033\007\011" +
    "\010\007\011\012\012\027\013\034\014\005\015\010\016" +
    "\015\020\031\024\004\027\213\062\026\001\002\000\040" +
    "\002\uffe4\004\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\024\uffe4" +
    "\027\uffe4\062\uffe4\001\002\000\034\004\046\007\011\010" +
    "\007\011\012\012\027\014\005\030\045\034\043\037\051" +
    "\040\053\041\044\042\052\054\050\001\002\000\006\043" +
    "\216\052\131\001\002\000\100\002\uffed\004\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\020\uffed\022\uffed\024\uffed\026\uffed\027\uffed\032\uffed" +
    "\036\uffed\043\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\001\002\000\034\004\046\007\011\010" +
    "\007\011\012\012\027\014\005\030\045\034\043\037\051" +
    "\040\053\041\044\042\052\054\050\001\002\000\036\022" +
    "\072\036\070\043\221\046\073\047\067\050\057\051\060" +
    "\053\063\054\062\055\066\056\071\057\061\060\065\061" +
    "\056\001\002\000\004\026\222\001\002\000\036\002\uffdf" +
    "\004\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\020\uffdf\024\uffdf\027\uffdf\062\uffdf" +
    "\001\002\000\036\002\uffe5\004\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5" +
    "\024\uffe5\027\uffe5\062\uffe5\001\002\000\040\002\uffe2\004" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\021\uffe2\024\uffe2\027\uffe2\062" +
    "\uffe2\001\002\000\006\020\232\025\231\001\002\000\040" +
    "\002\uffe7\004\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\225\024\uffe7" +
    "\027\uffe7\062\uffe7\001\002\000\036\002\uffe6\004\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\020\uffe6\024\uffe6\027\uffe6\062\uffe6\001\002\000" +
    "\040\002\uffe3\004\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\024" +
    "\uffe3\027\uffe3\062\uffe3\001\002\000\032\004\033\007\011" +
    "\010\007\011\012\012\027\013\034\014\005\015\010\016" +
    "\015\020\031\024\004\062\026\001\002\000\004\042\233" +
    "\001\002\000\034\004\046\007\011\010\007\011\012\012" +
    "\027\014\005\030\045\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\036\022\072\036\070\043" +
    "\235\046\073\047\067\050\057\051\060\053\063\054\062" +
    "\055\066\056\071\057\061\060\065\061\056\001\002\000" +
    "\004\025\236\001\002\000\032\004\033\007\011\010\007" +
    "\011\012\012\027\013\034\014\005\015\010\016\015\020" +
    "\031\024\004\062\026\001\002\000\034\004\033\007\011" +
    "\010\007\011\012\012\027\013\034\014\005\015\010\016" +
    "\015\020\031\024\004\027\240\062\026\001\002\000\040" +
    "\002\uffe1\004\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\024\uffe1" +
    "\027\uffe1\062\uffe1\001\002\000\034\004\033\007\011\010" +
    "\007\011\012\012\027\013\034\014\005\015\010\016\015" +
    "\020\031\024\004\027\242\062\026\001\002\000\036\002" +
    "\uffe0\004\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\020\uffe0\024\uffe0\027\uffe0\062" +
    "\uffe0\001\002\000\036\022\072\026\244\036\070\046\073" +
    "\047\067\050\057\051\060\053\063\054\062\055\066\056" +
    "\071\057\061\060\065\061\056\001\002\000\036\002\ufff4" +
    "\004\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\020\ufff4\024\ufff4\027\ufff4\062\ufff4" +
    "\001\002\000\034\004\046\007\011\010\007\011\012\012" +
    "\027\014\005\030\045\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\006\043\247\052\131\001" +
    "\002\000\100\002\uffec\004\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec\022" +
    "\uffec\024\uffec\026\uffec\027\uffec\032\uffec\036\uffec\043\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec" +
    "\001\002\000\034\004\046\007\011\010\007\011\012\012" +
    "\027\014\005\030\045\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\006\043\252\052\131\001" +
    "\002\000\100\002\uffef\004\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef\022" +
    "\uffef\024\uffef\026\uffef\027\uffef\032\uffef\036\uffef\043\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\001\002\000\034\004\046\007\011\010\007\011\012\012" +
    "\027\014\005\030\045\034\043\037\051\040\053\041\044" +
    "\042\052\054\050\001\002\000\036\022\072\036\070\043" +
    "\255\046\073\047\067\050\057\051\060\053\063\054\062" +
    "\055\066\056\071\057\061\060\065\061\056\001\002\000" +
    "\004\025\256\001\002\000\032\004\033\007\011\010\007" +
    "\011\012\012\027\013\034\014\005\015\010\016\015\020" +
    "\031\024\004\062\026\001\002\000\034\004\033\007\011" +
    "\010\007\011\012\012\027\013\034\014\005\015\010\016" +
    "\015\020\031\024\004\027\260\062\026\001\002\000\036" +
    "\002\uffea\004\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\024\uffea\027\uffea" +
    "\062\uffea\001\002\000\034\004\046\007\011\010\007\011" +
    "\012\012\027\014\005\030\045\034\043\037\051\040\053" +
    "\041\044\042\052\054\050\001\002\000\006\043\263\052" +
    "\131\001\002\000\100\002\uffee\004\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\020" +
    "\uffee\022\uffee\024\uffee\026\uffee\027\uffee\032\uffee\036\uffee" +
    "\043\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee" +
    "\062\uffee\001\002\000\034\004\046\007\011\010\007\011" +
    "\012\012\027\014\005\030\045\034\043\037\051\040\053" +
    "\041\044\042\052\054\050\001\002\000\006\043\266\052" +
    "\131\001\002\000\100\002\ufff0\004\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\022\ufff0\024\ufff0\026\ufff0\027\ufff0\032\ufff0\036\ufff0" +
    "\043\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\001\002\000\004\045\270\001\002\000\034\004" +
    "\046\007\011\010\007\011\012\012\027\014\005\030\045" +
    "\034\043\037\051\040\053\041\044\042\052\054\050\001" +
    "\002\000\036\022\072\026\272\036\070\046\073\047\067" +
    "\050\057\051\060\053\063\054\062\055\066\056\071\057" +
    "\061\060\065\061\056\001\002\000\036\002\uffdd\004\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\020\uffdd\024\uffdd\027\uffdd\062\uffdd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\034\003\021\004\005\006\031\007\017\010" +
    "\023\011\015\012\020\013\027\015\013\016\024\017\012" +
    "\020\016\024\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\242\003\053\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\021\004" +
    "\036\010\023\011\015\012\020\013\027\015\013\016\024" +
    "\017\012\020\016\024\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\225\022\223\023\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\021\004\005\007\035\010\023\011\015\012\020\013\027" +
    "\015\013\016\024\017\012\020\016\024\022\001\001\000" +
    "\030\003\021\004\036\010\023\011\015\012\020\013\027" +
    "\015\013\016\024\017\012\020\016\024\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\054\003\053\017\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\122\003\053\017\046\001\001\000" +
    "\002\001\001\000\010\002\120\003\053\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\116\003\053\017\046\001\001\000\002\001\001" +
    "\000\010\002\112\003\053\017\046\001\001\000\010\002" +
    "\111\003\053\017\046\001\001\000\010\002\110\003\053" +
    "\017\046\001\001\000\010\002\107\003\053\017\046\001" +
    "\001\000\002\001\001\000\010\002\104\003\053\017\046" +
    "\001\001\000\010\002\102\003\053\017\046\001\001\000" +
    "\010\002\101\003\053\017\046\001\001\000\010\002\100" +
    "\003\053\017\046\001\001\000\010\002\077\003\053\017" +
    "\046\001\001\000\010\002\076\003\053\017\046\001\001" +
    "\000\010\002\074\003\053\017\046\001\001\000\010\002" +
    "\075\003\053\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\105" +
    "\003\053\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\114\003" +
    "\053\017\046\001\001\000\002\001\001\000\010\002\117" +
    "\003\053\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\143\003\053\017\046\001\001\000\002\001" +
    "\001\000\012\002\127\003\053\005\126\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\132\003" +
    "\053\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\127\003\053\005\135\017" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\021\004\005\007\140\010\023\011\015\012\020\013" +
    "\027\015\013\016\024\017\012\020\016\024\022\001\001" +
    "\000\030\003\021\004\036\010\023\011\015\012\020\013" +
    "\027\015\013\016\024\017\012\020\016\024\022\001\001" +
    "\000\002\001\001\000\010\002\151\003\053\017\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\147" +
    "\003\053\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\160\003\053\017\046\001\001\000\010\002" +
    "\155\003\053\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\177\003\053\017\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\164\003\053" +
    "\017\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\167\003\053\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\172\003" +
    "\053\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\175\003\053\017\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\202\003\053\017\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\206" +
    "\003\053\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\021\004\005\007\211\010\023\011\015" +
    "\012\020\013\027\015\013\016\024\017\012\020\016\024" +
    "\022\001\001\000\030\003\021\004\036\010\023\011\015" +
    "\012\020\013\027\015\013\016\024\017\012\020\016\024" +
    "\022\001\001\000\002\001\001\000\012\002\127\003\053" +
    "\005\214\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\217\003\053\017\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\227" +
    "\023\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\021\004\005\007\240\010\023\011\015\012\020" +
    "\013\027\015\013\016\024\017\012\020\016\024\022\001" +
    "\001\000\002\001\001\000\010\002\233\003\053\017\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\021\004\005\007\236\010\023\011\015\012\020\013\027" +
    "\015\013\016\024\017\012\020\016\024\022\001\001\000" +
    "\030\003\021\004\036\010\023\011\015\012\020\013\027" +
    "\015\013\016\024\017\012\020\016\024\022\001\001\000" +
    "\002\001\001\000\030\003\021\004\036\010\023\011\015" +
    "\012\020\013\027\015\013\016\024\017\012\020\016\024" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\127\003\053\005\245\017\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\127" +
    "\003\053\005\250\017\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\253\003\053\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\021\004" +
    "\005\007\256\010\023\011\015\012\020\013\027\015\013" +
    "\016\024\017\012\020\016\024\022\001\001\000\030\003" +
    "\021\004\036\010\023\011\015\012\020\013\027\015\013" +
    "\016\024\017\012\020\016\024\022\001\001\000\002\001" +
    "\001\000\012\002\127\003\053\005\261\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\127\003" +
    "\053\005\264\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\270\003\053\017" +
    "\046\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoArit$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoArit$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoArit$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Instruccion> resultado = new LinkedList<>();
    NodoAST raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoArit$actions {




  private final SintacticoArit parser;

  /** Constructor */
  CUP$SintacticoArit$actions(SintacticoArit parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action_part00000000(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoArit$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoArit$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LISTA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoArit$parser.done_parsing();
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LISTA ::= LISTAINSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
            parser.resultado=li;
        
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT=li;
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT = new LinkedList<>();
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= LLAMADA_FUNCION 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) exp;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= FUNCION_DEFINIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= RETURN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RETURN ::= tReturn E tPuntoComa 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Return(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAEXPR ::= LISTAEXPR tComa E 
            {
              LinkedList<Expresion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		LinkedList<Expresion> li = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT=li;
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAEXPR ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LLAMADA_FUNCION ::= tId tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> e1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion(id,e1);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LLAMADA_FUNCION ::= tC tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("c",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA_FUNCION ::= tPie tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("pie",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LLAMADA_FUNCION ::= tBarplot tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("barras",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA_FUNCION ::= tList tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("list",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA_FUNCION ::= tMatrix tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("matrix",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCION_DEFINIDA ::= tId tIgual tFunction tParA LISTAEXPR tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new FuncionPropia(id,Simbolo.EnumTipoDato.FUNCION,li,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("FUNCION_DEFINIDA",13, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // WHILE ::= tWhile tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DO_WHILE ::= tDo tLlaveA LISTAINSTRUCCIONES tLlaveC tWhile tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SI ::= instruccion_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",9, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SI ::= instruccion_if instrucciones_elseif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",9, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SI ::= instruccion_if instrucciones_elseif instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b,c);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",9, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SI ::= instruccion_if instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",9, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion_if ::= tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_if",18, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones_elseif ::= instrucciones_elseif instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",15, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones_elseif ::= instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",15, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion_elseif ::= tElse tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_elseif",16, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion_else ::= tElse tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_else",17, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPRIMIR ::= tPrint tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		 RESULT=new Imprimir(exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= tPunto tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= tId tCorcheA E tCorcheC tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Declaracion(id,a,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= tId tCorcheA E tComa E tCorcheC tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Asignacion(id,a,b,exp,Operacion.Tipo_operacion.MODIFICACION_MATRIZ);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= tId tCorcheA E tComa tCorcheC tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Asignacion(id,a,null,exp,Operacion.Tipo_operacion.MODIFICACION_FILA_MATRIZ);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= tId tCorcheA tComa E tCorcheC tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Asignacion(id,null,b,exp,Operacion.Tipo_operacion.MODIFICACION_COLUMNA_MATRIZ);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E tModulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E tSuma E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E tMult E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E tDiv E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E tPow E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E tIgualIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E tMenorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E tMayorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E tMenorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E tMayorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E tDifQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E tAnd tAnd E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E tOr E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E tDifQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOT);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E tXor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= tParA E tParC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= tId tCorcheA E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR_POS_ARRAY,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= tId tCorcheA E tComa E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Estructura(a,b,c,Tipo_operacion.IDENTIFICADOR_POS_ARRAY_MATRIX);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= tId tCorcheA E tComa tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		RESULT=new Estructura(a,b,Tipo_operacion.DEV_FILA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= tId tCorcheA tComa E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Estructura(a,b,Tipo_operacion.DEV_COLUMNA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= tTrue 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("true",Tipo_operacion.TRUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= tFalse 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("false",Tipo_operacion.FALSE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= tDoble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.CADENA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= FUNCION_DEFINIDA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Expresion)a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoArit$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoArit$do_action_part00000000(
                               CUP$SintacticoArit$act_num,
                               CUP$SintacticoArit$parser,
                               CUP$SintacticoArit$stack,
                               CUP$SintacticoArit$top);
    }
}

}
