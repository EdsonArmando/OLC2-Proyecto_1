
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoArit extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Syma.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoArit() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoArit(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoArit(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\017\005\000\002\005\005\000\002\005\003\000\002\003" +
    "\006\000\002\016\011\000\002\014\011\000\002\015\013" +
    "\000\002\012\003\000\002\012\004\000\002\012\005\000" +
    "\002\012\004\000\002\023\011\000\002\020\004\000\002" +
    "\020\003\000\002\021\012\000\002\022\006\000\002\011" +
    "\007\000\002\010\006\000\002\010\007\000\002\010\011" +
    "\000\002\002\004\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\006\000\002\002\006\000\002\002\006" +
    "\000\002\002\006\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\020\004\024\005\025\006\006\007\011\011" +
    "\022\015\004\052\020\001\002\000\004\004\206\001\002" +
    "\000\024\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011" +
    "\ufffe\015\ufffe\020\ufffe\052\ufffe\001\002\000\004\032\200" +
    "\001\002\000\024\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\011\ufff7\015\ufff7\020\ufff7\052\ufff7\001\002\000\024" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\015" +
    "\ufffa\020\ufffa\052\ufffa\001\002\000\022\004\040\021\037" +
    "\025\035\027\043\030\045\031\036\032\044\044\041\001" +
    "\002\000\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\011\ufffd\015\ufffd\020\ufffd\052\ufffd\001\002\000\024\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\015\ufff6" +
    "\020\ufff6\052\ufff6\001\002\000\022\002\000\004\024\005" +
    "\025\006\006\007\011\011\022\015\004\052\020\001\002" +
    "\000\024\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\015\ufffc\020\ufffc\052\ufffc\001\002\000\026\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\012\161\015" +
    "\uffee\020\uffee\052\uffee\001\002\000\024\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\011\ufff9\015\ufff9\020\ufff9\052" +
    "\ufff9\001\002\000\004\032\152\001\002\000\024\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\015\ufffb\020" +
    "\ufffb\052\ufffb\001\002\000\004\032\144\001\002\000\004" +
    "\002\143\001\002\000\010\022\132\032\117\035\133\001" +
    "\002\000\004\016\027\001\002\000\024\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\015\ufff8\020\ufff8\052" +
    "\ufff8\001\002\000\020\004\024\005\025\006\006\007\011" +
    "\011\022\015\004\052\020\001\002\000\022\004\024\005" +
    "\025\006\006\007\011\011\022\015\004\020\032\052\020" +
    "\001\002\000\024\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\011\uffff\015\uffff\020\uffff\052\uffff\001\002\000\004" +
    "\006\033\001\002\000\004\032\034\001\002\000\022\004" +
    "\040\021\037\025\035\027\043\030\045\031\036\032\044" +
    "\044\041\001\002\000\042\013\uffca\017\uffca\026\uffca\033" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\001" +
    "\002\000\042\013\uffcb\017\uffcb\026\uffcb\033\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\042" +
    "\013\uffc9\017\uffc9\026\uffc9\033\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\001\002\000\046\013\uffce\017" +
    "\uffce\022\116\026\uffce\032\117\033\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\001\002\000\022\004\040" +
    "\021\037\025\035\027\043\030\045\031\036\032\044\044" +
    "\041\001\002\000\042\013\uffc7\017\uffc7\026\uffc7\033\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\001\002" +
    "\000\042\013\uffcd\017\uffcd\026\uffcd\033\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000\022\004" +
    "\040\021\037\025\035\027\043\030\045\031\036\032\044" +
    "\044\041\001\002\000\042\013\uffcc\017\uffcc\026\uffcc\033" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\001" +
    "\002\000\042\013\uffc8\017\uffc8\026\uffc8\033\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\001\002\000\036" +
    "\013\064\026\062\033\055\036\065\037\061\040\051\041" +
    "\052\043\056\044\054\045\060\046\063\047\053\050\057" +
    "\051\050\001\002\000\024\004\040\021\037\025\035\027" +
    "\043\030\045\031\036\032\044\035\110\044\041\001\002" +
    "\000\004\040\106\001\002\000\022\004\040\021\037\025" +
    "\035\027\043\030\045\031\036\032\044\044\041\001\002" +
    "\000\022\004\040\021\037\025\035\027\043\030\045\031" +
    "\036\032\044\044\041\001\002\000\022\004\040\021\037" +
    "\025\035\027\043\030\045\031\036\032\044\044\041\001" +
    "\002\000\004\017\102\001\002\000\022\004\040\021\037" +
    "\025\035\027\043\030\045\031\036\032\044\044\041\001" +
    "\002\000\024\004\040\021\037\025\035\027\043\030\045" +
    "\031\036\032\044\035\076\044\041\001\002\000\022\004" +
    "\040\021\037\025\035\027\043\030\045\031\036\032\044" +
    "\044\041\001\002\000\022\004\040\021\037\025\035\027" +
    "\043\030\045\031\036\032\044\044\041\001\002\000\022" +
    "\004\040\021\037\025\035\027\043\030\045\031\036\032" +
    "\044\044\041\001\002\000\022\004\040\021\037\025\035" +
    "\027\043\030\045\031\036\032\044\044\041\001\002\000" +
    "\022\004\040\021\037\025\035\027\043\030\045\031\036" +
    "\032\044\044\041\001\002\000\024\004\040\021\037\025" +
    "\035\027\043\030\045\031\036\032\044\035\066\044\041" +
    "\001\002\000\022\004\040\021\037\025\035\027\043\030" +
    "\045\031\036\032\044\044\041\001\002\000\042\013\uffd2" +
    "\017\uffd2\026\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\001\002\000\042\013\uffd5\017\uffd5\026" +
    "\uffd5\033\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\001\002\000\042\013\uffe0\017\uffe0\026\uffe0\033\uffe0" +
    "\036\065\037\061\040\051\041\052\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\053\050\057\051\050\001\002" +
    "\000\042\013\uffdc\017\uffdc\026\uffdc\033\uffdc\036\065\037" +
    "\061\040\051\041\052\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\053\050\057\051\050\001\002\000\042\013" +
    "\uffda\017\uffda\026\uffda\033\uffda\036\065\037\061\040\051" +
    "\041\052\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\053\050\057\051\050\001\002\000\042\013\uffd3\017\uffd3" +
    "\026\uffd3\033\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\042\013\uffdd\017\uffdd\026\uffdd\033" +
    "\uffdd\036\065\037\061\040\051\041\052\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\053\050\057\051\050\001" +
    "\002\000\022\004\040\021\037\025\035\027\043\030\045" +
    "\031\036\032\044\044\041\001\002\000\042\013\uffd8\017" +
    "\uffd8\026\uffd8\033\uffd8\036\065\037\061\040\051\041\052" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\001\002\000\042\013\uffd6\017\uffd6\026\uffd6" +
    "\033\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\001\002\000\042\013\064\017\uffdf\026\062\033\uffdf\036" +
    "\065\037\061\040\051\041\052\042\uffdf\043\uffdf\044\uffdf" +
    "\045\060\046\063\047\053\050\057\051\050\001\002\000" +
    "\024\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\015\uffef\020\uffef\052\uffef\001\002\000\042\013\064\017" +
    "\uffde\026\062\033\uffde\036\065\037\061\040\051\041\052" +
    "\042\uffde\043\uffde\044\uffde\045\060\046\063\047\053\050" +
    "\057\051\050\001\002\000\042\013\uffdb\017\uffdb\026\uffdb" +
    "\033\uffdb\036\065\037\061\040\051\041\052\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\001\002\000\042\013\uffd1\017\uffd1\026\uffd1\033\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000" +
    "\022\004\040\021\037\025\035\027\043\030\045\031\036" +
    "\032\044\044\041\001\002\000\042\013\uffd4\017\uffd4\026" +
    "\uffd4\033\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\001\002\000\022\004\040\021\037\025\035\027\043" +
    "\030\045\031\036\032\044\044\041\001\002\000\042\013" +
    "\uffd9\017\uffd9\026\uffd9\033\uffd9\036\065\037\061\040\051" +
    "\041\052\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\001\002\000\042\013\uffd7\017\uffd7" +
    "\026\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\001\002\000\036\013\064\026\062\033\114\036" +
    "\065\037\061\040\051\041\052\043\056\044\054\045\060" +
    "\046\063\047\053\050\057\051\050\001\002\000\042\013" +
    "\uffd0\017\uffd0\026\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\001\002\000\042\013\uffe1\017\uffe1" +
    "\026\uffe1\033\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\001\002\000\004\027\130\001\002\000\022\004" +
    "\040\021\037\025\035\027\043\030\045\031\036\032\044" +
    "\044\041\001\002\000\006\033\123\042\122\001\002\000" +
    "\040\013\064\026\062\033\ufff3\036\065\037\061\040\051" +
    "\041\052\042\ufff3\043\056\044\054\045\060\046\063\047" +
    "\053\050\057\051\050\001\002\000\022\004\040\021\037" +
    "\025\035\027\043\030\045\031\036\032\044\044\041\001" +
    "\002\000\066\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\011\ufff2\013\ufff2\015\ufff2\016\124\017\ufff2\020\ufff2\026" +
    "\ufff2\033\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\001\002\000\020\004\024\005\025\006\006" +
    "\007\011\011\022\015\004\052\020\001\002\000\022\004" +
    "\024\005\025\006\006\007\011\011\022\015\004\020\126" +
    "\052\020\001\002\000\064\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1" +
    "\026\ufff1\033\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\001\002\000\040\013\064\026\062\033" +
    "\ufff4\036\065\037\061\040\051\041\052\042\ufff4\043\056" +
    "\044\054\045\060\046\063\047\053\050\057\051\050\001" +
    "\002\000\004\023\131\001\002\000\042\013\uffcf\017\uffcf" +
    "\026\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\001\002\000\004\027\136\001\002\000\022\004" +
    "\040\021\037\025\035\027\043\030\045\031\036\032\044" +
    "\044\041\001\002\000\036\013\064\017\135\026\062\036" +
    "\065\037\061\040\051\041\052\043\056\044\054\045\060" +
    "\046\063\047\053\050\057\051\050\001\002\000\024\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\015\uffe4" +
    "\020\uffe4\052\uffe4\001\002\000\004\023\137\001\002\000" +
    "\004\035\140\001\002\000\022\004\040\021\037\025\035" +
    "\027\043\030\045\031\036\032\044\044\041\001\002\000" +
    "\036\013\064\017\142\026\062\036\065\037\061\040\051" +
    "\041\052\043\056\044\054\045\060\046\063\047\053\050" +
    "\057\051\050\001\002\000\024\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\015\uffe2\020\uffe2\052\uffe2\001" +
    "\002\000\004\002\001\001\002\000\022\004\040\021\037" +
    "\025\035\027\043\030\045\031\036\032\044\044\041\001" +
    "\002\000\036\013\064\026\062\033\146\036\065\037\061" +
    "\040\051\041\052\043\056\044\054\045\060\046\063\047" +
    "\053\050\057\051\050\001\002\000\004\016\147\001\002" +
    "\000\020\004\024\005\025\006\006\007\011\011\022\015" +
    "\004\052\020\001\002\000\022\004\024\005\025\006\006" +
    "\007\011\011\022\015\004\020\151\052\020\001\002\000" +
    "\026\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea" +
    "\012\uffea\015\uffea\020\uffea\052\uffea\001\002\000\022\004" +
    "\040\021\037\025\035\027\043\030\045\031\036\032\044" +
    "\044\041\001\002\000\036\013\064\026\062\033\154\036" +
    "\065\037\061\040\051\041\052\043\056\044\054\045\060" +
    "\046\063\047\053\050\057\051\050\001\002\000\004\017" +
    "\155\001\002\000\024\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\015\uffe5\020\uffe5\052\uffe5\001\002\000" +
    "\024\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb" +
    "\015\uffeb\020\uffeb\052\uffeb\001\002\000\026\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\015\uffe8" +
    "\020\uffe8\052\uffe8\001\002\000\026\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\011\uffed\012\161\015\uffed\020\uffed" +
    "\052\uffed\001\002\000\006\011\163\016\162\001\002\000" +
    "\020\004\024\005\025\006\006\007\011\011\022\015\004" +
    "\052\020\001\002\000\004\032\164\001\002\000\022\004" +
    "\040\021\037\025\035\027\043\030\045\031\036\032\044" +
    "\044\041\001\002\000\036\013\064\026\062\033\166\036" +
    "\065\037\061\040\051\041\052\043\056\044\054\045\060" +
    "\046\063\047\053\050\057\051\050\001\002\000\004\016" +
    "\167\001\002\000\020\004\024\005\025\006\006\007\011" +
    "\011\022\015\004\052\020\001\002\000\022\004\024\005" +
    "\025\006\006\007\011\011\022\015\004\020\171\052\020" +
    "\001\002\000\026\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\011\uffe7\012\uffe7\015\uffe7\020\uffe7\052\uffe7\001\002" +
    "\000\022\004\024\005\025\006\006\007\011\011\022\015" +
    "\004\020\173\052\020\001\002\000\024\002\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\015\uffe6\020\uffe6\052" +
    "\uffe6\001\002\000\024\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\011\uffec\015\uffec\020\uffec\052\uffec\001\002\000" +
    "\026\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9" +
    "\012\uffe9\015\uffe9\020\uffe9\052\uffe9\001\002\000\036\013" +
    "\064\017\177\026\062\036\065\037\061\040\051\041\052" +
    "\043\056\044\054\045\060\046\063\047\053\050\057\051" +
    "\050\001\002\000\024\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\011\ufff5\015\ufff5\020\ufff5\052\ufff5\001\002\000" +
    "\022\004\040\021\037\025\035\027\043\030\045\031\036" +
    "\032\044\044\041\001\002\000\036\013\064\026\062\033" +
    "\202\036\065\037\061\040\051\041\052\043\056\044\054" +
    "\045\060\046\063\047\053\050\057\051\050\001\002\000" +
    "\004\016\203\001\002\000\020\004\024\005\025\006\006" +
    "\007\011\011\022\015\004\052\020\001\002\000\022\004" +
    "\024\005\025\006\006\007\011\011\022\015\004\020\205" +
    "\052\020\001\002\000\024\002\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\011\ufff0\015\ufff0\020\ufff0\052\ufff0\001\002" +
    "\000\004\035\207\001\002\000\022\004\040\021\037\025" +
    "\035\027\043\030\045\031\036\032\044\044\041\001\002" +
    "\000\036\013\064\017\211\026\062\036\065\037\061\040" +
    "\051\041\052\043\056\044\054\045\060\046\063\047\053" +
    "\050\057\051\050\001\002\000\024\002\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\011\uffe3\015\uffe3\020\uffe3\052\uffe3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\032\003\025\004\004\006\022\007\013\010" +
    "\011\011\014\012\020\014\007\015\016\016\006\017\012" +
    "\023\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\175\003\045\016\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\025\004\030\010\011\011\014" +
    "\012\020\014\007\015\016\016\006\017\012\023\015\001" +
    "\001\000\002\001\001\000\010\020\157\021\156\022\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\025\004" +
    "\004\007\027\010\011\011\014\012\020\014\007\015\016" +
    "\016\006\017\012\023\015\001\001\000\026\003\025\004" +
    "\030\010\011\011\014\012\020\014\007\015\016\016\006" +
    "\017\012\023\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\046\003\045\016\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\114\003\045\016\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\112\003\045\016\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\110\003\045\016" +
    "\041\001\001\000\002\001\001\000\010\002\104\003\045" +
    "\016\041\001\001\000\010\002\103\003\045\016\041\001" +
    "\001\000\010\002\102\003\045\016\041\001\001\000\002" +
    "\001\001\000\010\002\100\003\045\016\041\001\001\000" +
    "\010\002\076\003\045\016\041\001\001\000\010\002\074" +
    "\003\045\016\041\001\001\000\010\002\073\003\045\016" +
    "\041\001\001\000\010\002\072\003\045\016\041\001\001" +
    "\000\010\002\071\003\045\016\041\001\001\000\010\002" +
    "\070\003\045\016\041\001\001\000\010\002\066\003\045" +
    "\016\041\001\001\000\010\002\067\003\045\016\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\077\003\045\016\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\106\003\045\016\041\001\001\000" +
    "\002\001\001\000\010\002\111\003\045\016\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\120\003\045\005\117\016\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\126\003\045\016\041" +
    "\001\001\000\002\001\001\000\030\003\025\004\004\007" +
    "\124\010\011\011\014\012\020\014\007\015\016\016\006" +
    "\017\012\023\015\001\001\000\026\003\025\004\030\010" +
    "\011\011\014\012\020\014\007\015\016\016\006\017\012" +
    "\023\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\133\003\045\016\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\140\003\045\016\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\144\003\045" +
    "\016\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\025\004\004\007\147\010\011\011\014\012\020" +
    "\014\007\015\016\016\006\017\012\023\015\001\001\000" +
    "\026\003\025\004\030\010\011\011\014\012\020\014\007" +
    "\015\016\016\006\017\012\023\015\001\001\000\002\001" +
    "\001\000\010\002\152\003\045\016\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\174\022\173\001\001" +
    "\000\002\001\001\000\030\003\025\004\004\007\171\010" +
    "\011\011\014\012\020\014\007\015\016\016\006\017\012" +
    "\023\015\001\001\000\002\001\001\000\010\002\164\003" +
    "\045\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\025\004\004\007\167\010\011\011\014\012" +
    "\020\014\007\015\016\016\006\017\012\023\015\001\001" +
    "\000\026\003\025\004\030\010\011\011\014\012\020\014" +
    "\007\015\016\016\006\017\012\023\015\001\001\000\002" +
    "\001\001\000\026\003\025\004\030\010\011\011\014\012" +
    "\020\014\007\015\016\016\006\017\012\023\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\200\003\045" +
    "\016\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\025\004\004\007\203\010\011\011\014\012\020" +
    "\014\007\015\016\016\006\017\012\023\015\001\001\000" +
    "\026\003\025\004\030\010\011\011\014\012\020\014\007" +
    "\015\016\016\006\017\012\023\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\207\003\045\016\041" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoArit$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoArit$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoArit$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Instruccion> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoArit$actions {




  private final SintacticoArit parser;

  /** Constructor */
  CUP$SintacticoArit$actions(SintacticoArit parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action_part00000000(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoArit$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoArit$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LISTA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoArit$parser.done_parsing();
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LISTA ::= LISTAINSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
            parser.resultado=li;
        
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT=li;
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT = new LinkedList<>();
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) exp;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION_DEFINIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= RETURN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RETURN ::= tReturn E tPuntoComa 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Return(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("RETURN",13, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTAEXPR ::= LISTAEXPR tComa E 
            {
              LinkedList<Expresion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		LinkedList<Expresion> li = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT=li;
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAEXPR ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= tId tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> e1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion(id,e1);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION_DEFINIDA ::= tId tParA LISTAEXPR tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new FuncionPropia(id,Simbolo.EnumTipoDato.FUNCION,li,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("FUNCION_DEFINIDA",12, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WHILE ::= tWhile tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DO_WHILE ::= tDo tLlaveA LISTAINSTRUCCIONES tLlaveC tWhile tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SI ::= instruccion_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SI ::= instruccion_if instrucciones_elseif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SI ::= instruccion_if instrucciones_elseif instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b,c);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SI ::= instruccion_if instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion_if ::= tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_if",17, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones_elseif ::= instrucciones_elseif instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",14, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones_elseif ::= instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",14, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion_elseif ::= tElse tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_elseif",15, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion_else ::= tElse tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_else",16, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPRIMIR ::= tPrint tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		 RESULT=new Imprimir(exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= tPunto tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= tId tCorcheA tEntero tCorcheC tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Declaracion(id,Integer.parseInt(num),exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E tModulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E tSuma E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E tMult E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E tDiv E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E tPow E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E tIgualIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E tMenorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E tMayorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E tMenorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E tMayorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E tDifQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E tAnd tAnd E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E tOr E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E tDifQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOT);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E tXor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= tParA E tParC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= tId tCorcheA tEntero tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR_POS_ARRAY,Integer.parseInt(b));
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= tTrue 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("true",Tipo_operacion.TRUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= tFalse 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("false",Tipo_operacion.FALSE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= tDoble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.CADENA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= FUNCION_DEFINIDA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Expresion)a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoArit$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoArit$do_action_part00000000(
                               CUP$SintacticoArit$act_num,
                               CUP$SintacticoArit$parser,
                               CUP$SintacticoArit$stack,
                               CUP$SintacticoArit$top);
    }
}

}
