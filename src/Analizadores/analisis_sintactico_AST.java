
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;
import Estructuras.NodoAST;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico_AST extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico_AST() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico_AST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico_AST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\007\005\000\002\010" +
    "\004\000\002\010\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\004" +
    "\007\000\002\013\013\000\002\023\005\000\002\006\005" +
    "\000\002\006\003\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\022\013\000\002\020\011\000\002\021" +
    "\013\000\002\016\003\000\002\016\004\000\002\016\005" +
    "\000\002\016\004\000\002\027\011\000\002\024\004\000" +
    "\002\024\003\000\002\025\012\000\002\026\006\000\002" +
    "\015\007\000\002\014\006\000\002\014\007\000\002\014" +
    "\011\000\002\011\013\000\002\011\012\000\002\011\012" +
    "\000\002\011\013\000\002\002\004\000\002\002\005\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\006" +
    "\000\002\002\006\000\002\002\006\000\002\002\006\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\014\000\002\002\005\000\002\002\010\000\002\002" +
    "\006\000\002\002\010\000\002\002\007\000\002\002\007" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\026\004\001\002\000\036\004\040\005" +
    "\031\010\014\011\012\012\015\013\033\014\041\015\011" +
    "\016\013\017\020\020\025\021\036\025\007\063\034\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\336\001\002\000\040\004\ufffe\005\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\025\ufffe\030\ufffe\063\ufffe\001" +
    "\002\000\004\043\333\001\002\000\004\043\330\001\002" +
    "\000\004\043\322\001\002\000\004\043\317\001\002\000" +
    "\004\043\314\001\002\000\040\004\ufff9\005\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\025\ufff9\030\ufff9\063\ufff9\001\002" +
    "\000\040\004\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\025\ufff6\030\ufff6\063\ufff6\001\002\000\036\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\055\064\001" +
    "\002\000\040\004\ufffd\005\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\025\ufffd\030\ufffd\063\ufffd\001\002\000\040\004\ufff5" +
    "\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\025\ufff5\030\ufff5" +
    "\063\ufff5\001\002\000\040\004\040\005\031\010\014\011" +
    "\012\012\015\013\033\014\041\015\011\016\013\017\020" +
    "\020\025\021\036\025\007\030\311\063\034\001\002\000" +
    "\040\004\ufffc\005\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\025" +
    "\ufffc\030\ufffc\063\ufffc\001\002\000\004\043\301\001\002" +
    "\000\004\027\300\001\002\000\042\004\uffe4\005\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\263\025\uffe4\030\uffe4\063" +
    "\uffe4\001\002\000\040\004\ufffa\005\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\025\ufffa\030\ufffa\063\ufffa\001\002\000\004" +
    "\027\257\001\002\000\040\004\ufff8\005\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\025\ufff8\030\ufff8\063\ufff8\001\002\000" +
    "\004\043\254\001\002\000\004\043\250\001\002\000\040" +
    "\004\ufffb\005\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\025\ufffb" +
    "\030\ufffb\063\ufffb\001\002\000\004\043\242\001\002\000" +
    "\040\004\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\025" +
    "\ufff4\030\ufff4\063\ufff4\001\002\000\010\032\202\043\135" +
    "\046\203\001\002\000\004\026\042\001\002\000\036\004" +
    "\040\005\031\010\014\011\012\012\015\013\033\014\041" +
    "\015\011\016\013\017\020\020\025\021\036\025\007\063" +
    "\034\001\002\000\040\004\040\005\031\010\014\011\012" +
    "\012\015\013\033\014\041\015\011\016\013\017\020\020" +
    "\025\021\036\025\007\030\045\063\034\001\002\000\040" +
    "\004\uffff\005\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\025\uffff" +
    "\030\uffff\063\uffff\001\002\000\004\016\046\001\002\000" +
    "\004\043\047\001\002\000\036\004\063\010\014\011\012" +
    "\012\015\013\033\015\011\031\050\035\055\040\057\041" +
    "\062\042\056\043\054\047\060\055\064\001\002\000\050" +
    "\006\uffb5\023\uffb5\024\uffb5\027\uffb5\033\uffb5\037\uffb5\044" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\001" +
    "\002\000\050\006\uffb2\023\uffb2\024\uffb2\027\uffb2\033\uffb2" +
    "\037\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\001\002\000\050\006\uffb4\023\uffb4\024\uffb4\027" +
    "\uffb4\033\uffb4\037\uffb4\044\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\001\002\000\040\006\072\023\102" +
    "\037\100\044\200\047\103\050\077\051\067\052\070\054" +
    "\074\055\073\056\076\057\101\060\071\061\075\062\066" +
    "\001\002\000\036\004\063\010\014\011\012\012\015\013" +
    "\033\015\011\031\050\035\055\040\057\041\062\042\056" +
    "\043\054\047\060\055\064\001\002\000\050\006\uffb6\023" +
    "\uffb6\024\uffb6\027\uffb6\033\uffb6\037\uffb6\044\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\001\002\000\050" +
    "\006\uffb7\023\uffb7\024\uffb7\027\uffb7\033\uffb7\037\uffb7\044" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\001" +
    "\002\000\050\006\uffb9\023\uffb9\024\uffb9\027\uffb9\033\uffb9" +
    "\037\uffb9\044\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\001\002\000\036\004\063\010\014\011\012\012" +
    "\015\013\033\015\011\031\050\035\055\040\057\041\062" +
    "\042\056\043\054\047\060\055\064\001\002\000\050\006" +
    "\uffb3\023\uffb3\024\uffb3\027\uffb3\033\uffb3\037\uffb3\044\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002" +
    "\000\050\006\uffb8\023\uffb8\024\uffb8\027\uffb8\033\uffb8\037" +
    "\uffb8\044\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\001\002\000\056\006\uffba\023\uffba\024\uffba\027\uffba" +
    "\032\133\033\uffba\037\uffba\043\135\044\uffba\046\134\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001\002\000" +
    "\036\004\063\010\014\011\012\012\015\013\033\015\011" +
    "\031\050\035\055\040\057\041\062\042\056\043\054\047" +
    "\060\055\064\001\002\000\050\006\072\023\uffd3\024\uffd3" +
    "\027\uffd3\033\uffd3\037\uffd3\044\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\001\002\000\040\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\046\130\047\060\055" +
    "\064\001\002\000\004\051\126\001\002\000\036\004\063" +
    "\010\014\011\012\012\015\013\033\015\011\031\050\035" +
    "\055\040\057\041\062\042\056\043\054\047\060\055\064" +
    "\001\002\000\036\004\063\010\014\011\012\012\015\013" +
    "\033\015\011\031\050\035\055\040\057\041\062\042\056" +
    "\043\054\047\060\055\064\001\002\000\036\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\055\064\001" +
    "\002\000\036\004\063\010\014\011\012\012\015\013\033" +
    "\015\011\031\050\035\055\040\057\041\062\042\056\043" +
    "\054\047\060\055\064\001\002\000\036\004\063\010\014" +
    "\011\012\012\015\013\033\015\011\031\050\035\055\040" +
    "\057\041\062\042\056\043\054\047\060\055\064\001\002" +
    "\000\040\004\063\010\014\011\012\012\015\013\033\015" +
    "\011\031\050\035\055\040\057\041\062\042\056\043\054" +
    "\046\114\047\060\055\064\001\002\000\036\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\055\064\001" +
    "\002\000\036\004\063\010\014\011\012\012\015\013\033" +
    "\015\011\031\050\035\055\040\057\041\062\042\056\043" +
    "\054\047\060\055\064\001\002\000\036\004\063\010\014" +
    "\011\012\012\015\013\033\015\011\031\050\035\055\040" +
    "\057\041\062\042\056\043\054\047\060\055\064\001\002" +
    "\000\036\004\063\010\014\011\012\012\015\013\033\015" +
    "\011\031\050\035\055\040\057\041\062\042\056\043\054" +
    "\047\060\055\064\001\002\000\036\004\063\010\014\011" +
    "\012\012\015\013\033\015\011\031\050\035\055\040\057" +
    "\041\062\042\056\043\054\047\060\055\064\001\002\000" +
    "\040\004\063\010\014\011\012\012\015\013\033\015\011" +
    "\031\050\035\055\040\057\041\062\042\056\043\054\046" +
    "\104\047\060\055\064\001\002\000\036\004\063\010\014" +
    "\011\012\012\015\013\033\015\011\031\050\035\055\040" +
    "\057\041\062\042\056\043\054\047\060\055\064\001\002" +
    "\000\050\006\072\023\uffc3\024\uffc3\027\uffc3\033\uffc3\037" +
    "\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\050\006\072\023\uffc6\024\uffc6\027\uffc6" +
    "\033\uffc6\037\uffc6\044\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\001\002\000\050\006\072\023\uffd2\024" +
    "\uffd2\027\uffd2\033\uffd2\037\uffd2\044\uffd2\047\103\050\077" +
    "\051\067\052\070\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\071\061\075\062\066\001\002\000\050\006\072" +
    "\023\uffcd\024\uffcd\027\uffcd\033\uffcd\037\uffcd\044\uffcd\047" +
    "\103\050\077\051\067\052\070\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\071\061\075\062\066\001\002\000" +
    "\050\006\072\023\uffcb\024\uffcb\027\uffcb\033\uffcb\037\uffcb" +
    "\044\uffcb\047\103\050\077\051\067\052\070\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\071\061\075\062\066" +
    "\001\002\000\050\006\072\023\uffc4\024\uffc4\027\uffc4\033" +
    "\uffc4\037\uffc4\044\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\001\002\000\050\006\072\023\uffce\024\uffce" +
    "\027\uffce\033\uffce\037\uffce\044\uffce\047\103\050\077\051" +
    "\067\052\070\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\071\061\075\062\066\001\002\000\036\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\055\064\001" +
    "\002\000\050\006\072\023\uffc9\024\uffc9\027\uffc9\033\uffc9" +
    "\037\uffc9\044\uffc9\047\103\050\077\051\067\052\070\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\001\002\000\050\006\072\023\uffc7\024\uffc7\027" +
    "\uffc7\033\uffc7\037\uffc7\044\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\001\002\000\050\006\072\023\102" +
    "\024\uffd0\027\uffd0\033\uffd0\037\100\044\uffd0\047\103\050" +
    "\077\051\067\052\070\053\uffd0\054\uffd0\055\uffd0\056\076" +
    "\057\101\060\071\061\075\062\066\001\002\000\050\006" +
    "\072\023\102\024\uffcf\027\uffcf\033\uffcf\037\100\044\uffcf" +
    "\047\103\050\077\051\067\052\070\053\uffcf\054\uffcf\055" +
    "\uffcf\056\076\057\101\060\071\061\075\062\066\001\002" +
    "\000\040\006\072\023\102\024\122\037\100\047\103\050" +
    "\077\051\067\052\070\054\074\055\073\056\076\057\101" +
    "\060\071\061\075\062\066\001\002\000\036\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\055\064\001" +
    "\002\000\050\006\072\023\102\024\ufff2\027\ufff2\033\ufff2" +
    "\037\100\044\ufff2\047\103\050\077\051\067\052\070\053" +
    "\ufff2\054\074\055\073\056\076\057\101\060\071\061\075" +
    "\062\066\001\002\000\050\006\072\023\uffcc\024\uffcc\027" +
    "\uffcc\033\uffcc\037\uffcc\044\uffcc\047\103\050\077\051\067" +
    "\052\070\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\001\002\000\050\006\072\023\uffc2" +
    "\024\uffc2\027\uffc2\033\uffc2\037\uffc2\044\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\036\004" +
    "\063\010\014\011\012\012\015\013\033\015\011\031\050" +
    "\035\055\040\057\041\062\042\056\043\054\047\060\055" +
    "\064\001\002\000\050\006\072\023\uffc5\024\uffc5\027\uffc5" +
    "\033\uffc5\037\uffc5\044\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\062\uffc5\001\002\000\036\004\063\010\014\011" +
    "\012\012\015\013\033\015\011\031\050\035\055\040\057" +
    "\041\062\042\056\043\054\047\060\055\064\001\002\000" +
    "\050\006\072\023\uffca\024\uffca\027\uffca\033\uffca\037\uffca" +
    "\044\uffca\047\103\050\077\051\067\052\070\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\001\002\000\050\006\072\023\uffc8\024\uffc8\027\uffc8\033" +
    "\uffc8\037\uffc8\044\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\001\002\000\042\004\063\010\014\011\012" +
    "\012\015\013\033\015\011\031\050\032\153\035\055\040" +
    "\057\041\062\042\056\043\054\047\060\053\154\055\064" +
    "\001\002\000\004\036\143\001\002\000\036\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\055\064\001" +
    "\002\000\006\044\141\053\140\001\002\000\042\006\072" +
    "\023\102\037\100\044\uffee\047\103\050\077\051\067\052" +
    "\070\053\uffee\054\074\055\073\056\076\057\101\060\071" +
    "\061\075\062\066\001\002\000\036\004\063\010\014\011" +
    "\012\012\015\013\033\015\011\031\050\035\055\040\057" +
    "\041\062\042\056\043\054\047\060\055\064\001\002\000" +
    "\050\006\uffed\023\uffed\024\uffed\027\uffed\033\uffed\037\uffed" +
    "\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\001\002\000\042\006\072\023\102\037\100\044\uffef\047" +
    "\103\050\077\051\067\052\070\053\uffef\054\074\055\073" +
    "\056\076\057\101\060\071\061\075\062\066\001\002\000" +
    "\004\043\144\001\002\000\036\004\063\010\014\011\012" +
    "\012\015\013\033\015\011\031\050\035\055\040\057\041" +
    "\062\042\056\043\054\047\060\055\064\001\002\000\006" +
    "\044\146\053\140\001\002\000\004\026\147\001\002\000" +
    "\036\004\040\005\031\010\014\011\012\012\015\013\033" +
    "\014\041\015\011\016\013\017\020\020\025\021\036\025" +
    "\007\063\034\001\002\000\040\004\040\005\031\010\014" +
    "\011\012\012\015\013\033\014\041\015\011\016\013\017" +
    "\020\020\025\021\036\025\007\030\151\063\034\001\002" +
    "\000\106\004\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\033" +
    "\uffe7\037\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\001\002\000\042\006\072\023\102" +
    "\033\163\037\100\047\103\050\077\051\067\052\070\053" +
    "\162\054\074\055\073\056\076\057\101\060\071\061\075" +
    "\062\066\001\002\000\036\004\063\010\014\011\012\012" +
    "\015\013\033\015\011\031\050\035\055\040\057\041\062" +
    "\042\056\043\054\047\060\055\064\001\002\000\036\004" +
    "\063\010\014\011\012\012\015\013\033\015\011\031\050" +
    "\035\055\040\057\041\062\042\056\043\054\047\060\055" +
    "\064\001\002\000\040\006\072\023\102\033\156\037\100" +
    "\047\103\050\077\051\067\052\070\054\074\055\073\056" +
    "\076\057\101\060\071\061\075\062\066\001\002\000\050" +
    "\006\uffbb\023\uffbb\024\uffbb\027\uffbb\033\uffbb\037\uffbb\044" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001" +
    "\002\000\040\006\072\023\102\033\160\037\100\047\103" +
    "\050\077\051\067\052\070\054\074\055\073\056\076\057" +
    "\101\060\071\061\075\062\066\001\002\000\004\033\161" +
    "\001\002\000\050\006\uffbf\023\uffbf\024\uffbf\027\uffbf\033" +
    "\uffbf\037\uffbf\044\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\001\002\000\040\004\063\010\014\011\012" +
    "\012\015\013\033\015\011\031\050\033\173\035\055\040" +
    "\057\041\062\042\056\043\054\047\060\055\064\001\002" +
    "\000\052\006\uffbe\023\uffbe\024\uffbe\027\uffbe\032\164\033" +
    "\uffbe\037\uffbe\044\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\001\002\000\036\004\063\010\014\011\012" +
    "\012\015\013\033\015\011\031\050\035\055\040\057\041" +
    "\062\042\056\043\054\047\060\055\064\001\002\000\040" +
    "\006\072\023\102\033\166\037\100\047\103\050\077\051" +
    "\067\052\070\054\074\055\073\056\076\057\101\060\071" +
    "\061\075\062\066\001\002\000\004\032\167\001\002\000" +
    "\036\004\063\010\014\011\012\012\015\013\033\015\011" +
    "\031\050\035\055\040\057\041\062\042\056\043\054\047" +
    "\060\055\064\001\002\000\040\006\072\023\102\033\171" +
    "\037\100\047\103\050\077\051\067\052\070\054\074\055" +
    "\073\056\076\057\101\060\071\061\075\062\066\001\002" +
    "\000\050\006\uffc1\023\uffc1\024\uffc1\027\uffc1\033\uffc1\037" +
    "\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\001\002\000\040\006\072\023\102\033\174\037\100" +
    "\047\103\050\077\051\067\052\070\054\074\055\073\056" +
    "\076\057\101\060\071\061\075\062\066\001\002\000\050" +
    "\006\uffbc\023\uffbc\024\uffbc\027\uffbc\033\uffbc\037\uffbc\044" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\001" +
    "\002\000\050\006\uffbd\023\uffbd\024\uffbd\027\uffbd\033\uffbd" +
    "\037\uffbd\044\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\001\002\000\050\006\072\023\uffd1\024\uffd1\027" +
    "\uffd1\033\uffd1\037\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\001\002\000\040\006\072\023\102" +
    "\037\100\044\177\047\103\050\077\051\067\052\070\054" +
    "\074\055\073\056\076\057\101\060\071\061\075\062\066" +
    "\001\002\000\050\006\uffc0\023\uffc0\024\uffc0\027\uffc0\033" +
    "\uffc0\037\uffc0\044\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\001\002\000\004\027\201\001\002\000\040" +
    "\004\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\025\uffe5" +
    "\030\uffe5\063\uffe5\001\002\000\042\004\063\010\014\011" +
    "\012\012\015\013\033\015\011\031\050\032\207\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\053\210\055" +
    "\064\001\002\000\040\004\063\010\014\011\012\012\015" +
    "\013\033\015\011\031\050\035\055\036\143\040\057\041" +
    "\062\042\056\043\054\047\060\055\064\001\002\000\040" +
    "\006\072\023\102\027\205\037\100\047\103\050\077\051" +
    "\067\052\070\054\074\055\073\056\076\057\101\060\071" +
    "\061\075\062\066\001\002\000\040\004\uffda\005\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\025\uffda\030\uffda\063\uffda\001" +
    "\002\000\042\006\072\023\102\033\224\037\100\047\103" +
    "\050\077\051\067\052\070\053\225\054\074\055\073\056" +
    "\076\057\101\060\071\061\075\062\066\001\002\000\036" +
    "\004\063\010\014\011\012\012\015\013\033\015\011\031" +
    "\050\035\055\040\057\041\062\042\056\043\054\047\060" +
    "\055\064\001\002\000\036\004\063\010\014\011\012\012" +
    "\015\013\033\015\011\031\050\035\055\040\057\041\062" +
    "\042\056\043\054\047\060\055\064\001\002\000\040\006" +
    "\072\023\102\033\212\037\100\047\103\050\077\051\067" +
    "\052\070\054\074\055\073\056\076\057\101\060\071\061" +
    "\075\062\066\001\002\000\004\046\213\001\002\000\036" +
    "\004\063\010\014\011\012\012\015\013\033\015\011\031" +
    "\050\035\055\040\057\041\062\042\056\043\054\047\060" +
    "\055\064\001\002\000\040\006\072\023\102\027\215\037" +
    "\100\047\103\050\077\051\067\052\070\054\074\055\073" +
    "\056\076\057\101\060\071\061\075\062\066\001\002\000" +
    "\040\004\uffd5\005\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\025" +
    "\uffd5\030\uffd5\063\uffd5\001\002\000\040\006\072\023\102" +
    "\033\217\037\100\047\103\050\077\051\067\052\070\054" +
    "\074\055\073\056\076\057\101\060\071\061\075\062\066" +
    "\001\002\000\004\033\220\001\002\000\004\046\221\001" +
    "\002\000\036\004\063\010\014\011\012\012\015\013\033" +
    "\015\011\031\050\035\055\040\057\041\062\042\056\043" +
    "\054\047\060\055\064\001\002\000\040\006\072\023\102" +
    "\027\223\037\100\047\103\050\077\051\067\052\070\054" +
    "\074\055\073\056\076\057\101\060\071\061\075\062\066" +
    "\001\002\000\040\004\uffd4\005\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\025\uffd4\030\uffd4\063\uffd4\001\002\000\004\046" +
    "\237\001\002\000\040\004\063\010\014\011\012\012\015" +
    "\013\033\015\011\031\050\033\227\035\055\040\057\041" +
    "\062\042\056\043\054\047\060\055\064\001\002\000\040" +
    "\006\072\023\102\033\233\037\100\047\103\050\077\051" +
    "\067\052\070\054\074\055\073\056\076\057\101\060\071" +
    "\061\075\062\066\001\002\000\004\046\230\001\002\000" +
    "\036\004\063\010\014\011\012\012\015\013\033\015\011" +
    "\031\050\035\055\040\057\041\062\042\056\043\054\047" +
    "\060\055\064\001\002\000\040\006\072\023\102\027\232" +
    "\037\100\047\103\050\077\051\067\052\070\054\074\055" +
    "\073\056\076\057\101\060\071\061\075\062\066\001\002" +
    "\000\040\004\uffd6\005\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\025\uffd6\030\uffd6\063\uffd6\001\002\000\004\046\234\001" +
    "\002\000\036\004\063\010\014\011\012\012\015\013\033" +
    "\015\011\031\050\035\055\040\057\041\062\042\056\043" +
    "\054\047\060\055\064\001\002\000\040\006\072\023\102" +
    "\027\236\037\100\047\103\050\077\051\067\052\070\054" +
    "\074\055\073\056\076\057\101\060\071\061\075\062\066" +
    "\001\002\000\040\004\uffd7\005\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\025\uffd7\030\uffd7\063\uffd7\001\002\000\036\004" +
    "\063\010\014\011\012\012\015\013\033\015\011\031\050" +
    "\035\055\040\057\041\062\042\056\043\054\047\060\055" +
    "\064\001\002\000\040\006\072\023\102\027\241\037\100" +
    "\047\103\050\077\051\067\052\070\054\074\055\073\056" +
    "\076\057\101\060\071\061\075\062\066\001\002\000\040" +
    "\004\uffd8\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\025\uffd8" +
    "\030\uffd8\063\uffd8\001\002\000\036\004\063\010\014\011" +
    "\012\012\015\013\033\015\011\031\050\035\055\040\057" +
    "\041\062\042\056\043\054\047\060\055\064\001\002\000" +
    "\040\006\072\023\102\037\100\044\244\047\103\050\077" +
    "\051\067\052\070\054\074\055\073\056\076\057\101\060" +
    "\071\061\075\062\066\001\002\000\004\026\245\001\002" +
    "\000\036\004\040\005\031\010\014\011\012\012\015\013" +
    "\033\014\041\015\011\016\013\017\020\020\025\021\036" +
    "\025\007\063\034\001\002\000\040\004\040\005\031\010" +
    "\014\011\012\012\015\013\033\014\041\015\011\016\013" +
    "\017\020\020\025\021\036\025\007\030\247\063\034\001" +
    "\002\000\042\004\uffe0\005\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\025\uffe0\030\uffe0\063\uffe0\001\002\000\036" +
    "\004\063\010\014\011\012\012\015\013\033\015\011\031" +
    "\050\035\055\040\057\041\062\042\056\043\054\047\060" +
    "\055\064\001\002\000\040\006\072\023\102\037\100\044" +
    "\252\047\103\050\077\051\067\052\070\054\074\055\073" +
    "\056\076\057\101\060\071\061\075\062\066\001\002\000" +
    "\004\027\253\001\002\000\040\004\uffdb\005\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\025\uffdb\030\uffdb\063\uffdb\001\002" +
    "\000\036\004\063\010\014\011\012\012\015\013\033\015" +
    "\011\031\050\035\055\040\057\041\062\042\056\043\054" +
    "\047\060\055\064\001\002\000\006\044\256\053\140\001" +
    "\002\000\050\006\uffe9\023\uffe9\024\uffe9\027\uffe9\033\uffe9" +
    "\037\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\001\002\000\040\004\ufff3\005\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\025\ufff3\030\ufff3\063\ufff3\001\002\000" +
    "\040\004\uffe1\005\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\025" +
    "\uffe1\030\uffe1\063\uffe1\001\002\000\042\004\uffde\005\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\025\uffde\030\uffde" +
    "\063\uffde\001\002\000\042\004\uffe3\005\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\263\025\uffe3\030\uffe3\063\uffe3\001" +
    "\002\000\006\021\265\026\264\001\002\000\036\004\040" +
    "\005\031\010\014\011\012\012\015\013\033\014\041\015" +
    "\011\016\013\017\020\020\025\021\036\025\007\063\034" +
    "\001\002\000\004\043\266\001\002\000\036\004\063\010" +
    "\014\011\012\012\015\013\033\015\011\031\050\035\055" +
    "\040\057\041\062\042\056\043\054\047\060\055\064\001" +
    "\002\000\040\006\072\023\102\037\100\044\270\047\103" +
    "\050\077\051\067\052\070\054\074\055\073\056\076\057" +
    "\101\060\071\061\075\062\066\001\002\000\004\026\271" +
    "\001\002\000\036\004\040\005\031\010\014\011\012\012" +
    "\015\013\033\014\041\015\011\016\013\017\020\020\025" +
    "\021\036\025\007\063\034\001\002\000\040\004\040\005" +
    "\031\010\014\011\012\012\015\013\033\014\041\015\011" +
    "\016\013\017\020\020\025\021\036\025\007\030\273\063" +
    "\034\001\002\000\042\004\uffdd\005\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\025\uffdd\030\uffdd\063\uffdd\001\002" +
    "\000\040\004\040\005\031\010\014\011\012\012\015\013" +
    "\033\014\041\015\011\016\013\017\020\020\025\021\036" +
    "\025\007\030\275\063\034\001\002\000\040\004\uffdc\005" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\025\uffdc\030\uffdc\063" +
    "\uffdc\001\002\000\040\004\uffe2\005\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\025\uffe2\030\uffe2\063\uffe2\001\002\000\042" +
    "\004\uffdf\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\025\uffdf\030\uffdf\063\uffdf\001\002\000\040\004\ufff7\005" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\025\ufff7\030\ufff7\063" +
    "\ufff7\001\002\000\004\004\302\001\002\000\004\007\303" +
    "\001\002\000\036\004\063\010\014\011\012\012\015\013" +
    "\033\015\011\031\050\035\055\040\057\041\062\042\056" +
    "\043\054\047\060\055\064\001\002\000\040\006\072\023" +
    "\102\037\100\044\305\047\103\050\077\051\067\052\070" +
    "\054\074\055\073\056\076\057\101\060\071\061\075\062" +
    "\066\001\002\000\004\026\306\001\002\000\036\004\040" +
    "\005\031\010\014\011\012\012\015\013\033\014\041\015" +
    "\011\016\013\017\020\020\025\021\036\025\007\063\034" +
    "\001\002\000\040\004\040\005\031\010\014\011\012\012" +
    "\015\013\033\014\041\015\011\016\013\017\020\020\025" +
    "\021\036\025\007\030\310\063\034\001\002\000\040\004" +
    "\ufff1\005\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\025\ufff1\030" +
    "\ufff1\063\ufff1\001\002\000\004\002\000\001\002\000\040" +
    "\006\072\023\102\027\313\037\100\047\103\050\077\051" +
    "\067\052\070\054\074\055\073\056\076\057\101\060\071" +
    "\061\075\062\066\001\002\000\040\004\ufff0\005\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\025\ufff0\030\ufff0\063\ufff0\001" +
    "\002\000\036\004\063\010\014\011\012\012\015\013\033" +
    "\015\011\031\050\035\055\040\057\041\062\042\056\043" +
    "\054\047\060\055\064\001\002\000\006\044\316\053\140" +
    "\001\002\000\050\006\uffe8\023\uffe8\024\uffe8\027\uffe8\033" +
    "\uffe8\037\uffe8\044\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\001\002\000\036\004\063\010\014\011\012" +
    "\012\015\013\033\015\011\031\050\035\055\040\057\041" +
    "\062\042\056\043\054\047\060\055\064\001\002\000\006" +
    "\044\321\053\140\001\002\000\050\006\uffeb\023\uffeb\024" +
    "\uffeb\027\uffeb\033\uffeb\037\uffeb\044\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000\036\004\063" +
    "\010\014\011\012\012\015\013\033\015\011\031\050\035" +
    "\055\040\057\041\062\042\056\043\054\047\060\055\064" +
    "\001\002\000\040\006\072\023\102\037\100\044\324\047" +
    "\103\050\077\051\067\052\070\054\074\055\073\056\076" +
    "\057\101\060\071\061\075\062\066\001\002\000\004\026" +
    "\325\001\002\000\036\004\040\005\031\010\014\011\012" +
    "\012\015\013\033\014\041\015\011\016\013\017\020\020" +
    "\025\021\036\025\007\063\034\001\002\000\040\004\040" +
    "\005\031\010\014\011\012\012\015\013\033\014\041\015" +
    "\011\016\013\017\020\020\025\021\036\025\007\030\327" +
    "\063\034\001\002\000\040\004\uffe6\005\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\025\uffe6\030\uffe6\063\uffe6\001\002\000" +
    "\036\004\063\010\014\011\012\012\015\013\033\015\011" +
    "\031\050\035\055\040\057\041\062\042\056\043\054\047" +
    "\060\055\064\001\002\000\006\044\332\053\140\001\002" +
    "\000\050\006\uffea\023\uffea\024\uffea\027\uffea\033\uffea\037" +
    "\uffea\044\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\001\002\000\036\004\063\010\014\011\012\012\015" +
    "\013\033\015\011\031\050\035\055\040\057\041\062\042" +
    "\056\043\054\047\060\055\064\001\002\000\006\044\335" +
    "\053\140\001\002\000\050\006\uffec\023\uffec\024\uffec\027" +
    "\uffec\033\uffec\037\uffec\044\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\001\002\000\004\046\337\001\002" +
    "\000\036\004\063\010\014\011\012\012\015\013\033\015" +
    "\011\031\050\035\055\040\057\041\062\042\056\043\054" +
    "\047\060\055\064\001\002\000\040\006\072\023\102\027" +
    "\341\037\100\047\103\050\077\051\067\052\070\054\074" +
    "\055\073\056\076\057\101\060\071\061\075\062\066\001" +
    "\002\000\040\004\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\025\uffd9\030\uffd9\063\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\007\004\001\001\000\034\003\025\005" +
    "\007\010\022\011\027\013\036\014\020\015\023\016\034" +
    "\020\015\021\031\022\016\023\021\027\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\311\003\051\004\060\022" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\025\005\043\011\027\013\036\014\020\015\023\016" +
    "\034\020\015\021\031\022\016\023\021\027\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\261\025\260\026\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\025\005\007\010\042\011\027\013\036\014\020\015\023" +
    "\016\034\020\015\021\031\022\016\023\021\027\026\001" +
    "\001\000\032\003\025\005\043\011\027\013\036\014\020" +
    "\015\023\016\034\020\015\021\031\022\016\023\021\027" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\052\003\051\004\060\022\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\175\003\051\004\060\022" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\174\003\051\004\060\022\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\064\003\051\004\060\022\050\001\001\000" +
    "\002\001\001\000\012\002\130\003\051\004\060\022\050" +
    "\001\001\000\002\001\001\000\012\002\124\003\051\004" +
    "\060\022\050\001\001\000\012\002\123\003\051\004\060" +
    "\022\050\001\001\000\012\002\120\003\051\004\060\022" +
    "\050\001\001\000\012\002\117\003\051\004\060\022\050" +
    "\001\001\000\012\002\116\003\051\004\060\022\050\001" +
    "\001\000\012\002\114\003\051\004\060\022\050\001\001" +
    "\000\012\002\112\003\051\004\060\022\050\001\001\000" +
    "\012\002\111\003\051\004\060\022\050\001\001\000\012" +
    "\002\110\003\051\004\060\022\050\001\001\000\012\002" +
    "\107\003\051\004\060\022\050\001\001\000\012\002\106" +
    "\003\051\004\060\022\050\001\001\000\012\002\104\003" +
    "\051\004\060\022\050\001\001\000\012\002\105\003\051" +
    "\004\060\022\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\115\003" +
    "\051\004\060\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\122\003\051\004\060\022\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\126\003\051\004\060\022\050\001\001\000\002" +
    "\001\001\000\012\002\131\003\051\004\060\022\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\151" +
    "\003\051\004\060\022\050\001\001\000\002\001\001\000" +
    "\014\002\136\003\051\004\060\006\135\022\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\141\003" +
    "\051\004\060\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\136\003\051\004" +
    "\060\006\144\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\025\005\007\010\147\011\027\013" +
    "\036\014\020\015\023\016\034\020\015\021\031\022\016" +
    "\023\021\027\026\001\001\000\032\003\025\005\043\011" +
    "\027\013\036\014\020\015\023\016\034\020\015\021\031" +
    "\022\016\023\021\027\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\156\003\051\004\060\022\050" +
    "\001\001\000\012\002\154\003\051\004\060\022\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\171\003" +
    "\051\004\060\022\050\001\001\000\002\001\001\000\012" +
    "\002\164\003\051\004\060\022\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\167\003\051\004\060" +
    "\022\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\205\003\051\004\060" +
    "\022\050\001\001\000\012\002\203\003\051\004\060\022" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\215\003\051\004\060\022\050\001" +
    "\001\000\012\002\210\003\051\004\060\022\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\213\003" +
    "\051\004\060\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\221\003\051\004\060\022\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\225\003\051\004\060\022\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\230\003\051\004" +
    "\060\022\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\234\003\051\004\060\022" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\237\003\051\004\060\022\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\242\003\051\004\060" +
    "\022\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\025\005\007\010\245\011\027\013\036\014\020" +
    "\015\023\016\034\020\015\021\031\022\016\023\021\027" +
    "\026\001\001\000\032\003\025\005\043\011\027\013\036" +
    "\014\020\015\023\016\034\020\015\021\031\022\016\023" +
    "\021\027\026\001\001\000\002\001\001\000\012\002\250" +
    "\003\051\004\060\022\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\136\003\051" +
    "\004\060\006\254\022\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\276\026\275\001\001\000\002\001" +
    "\001\000\034\003\025\005\007\010\273\011\027\013\036" +
    "\014\020\015\023\016\034\020\015\021\031\022\016\023" +
    "\021\027\026\001\001\000\002\001\001\000\012\002\266" +
    "\003\051\004\060\022\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\025\005\007\010\271\011\027" +
    "\013\036\014\020\015\023\016\034\020\015\021\031\022" +
    "\016\023\021\027\026\001\001\000\032\003\025\005\043" +
    "\011\027\013\036\014\020\015\023\016\034\020\015\021" +
    "\031\022\016\023\021\027\026\001\001\000\002\001\001" +
    "\000\032\003\025\005\043\011\027\013\036\014\020\015" +
    "\023\016\034\020\015\021\031\022\016\023\021\027\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\303\003\051\004\060\022\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\025\005\007" +
    "\010\306\011\027\013\036\014\020\015\023\016\034\020" +
    "\015\021\031\022\016\023\021\027\026\001\001\000\032" +
    "\003\025\005\043\011\027\013\036\014\020\015\023\016" +
    "\034\020\015\021\031\022\016\023\021\027\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\136\003\051\004\060\006\314" +
    "\022\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\136\003\051\004\060\006\317\022\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\322\003" +
    "\051\004\060\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\025\005\007\010\325\011\027\013" +
    "\036\014\020\015\023\016\034\020\015\021\031\022\016" +
    "\023\021\027\026\001\001\000\032\003\025\005\043\011" +
    "\027\013\036\014\020\015\023\016\034\020\015\021\031" +
    "\022\016\023\021\027\026\001\001\000\002\001\001\000" +
    "\014\002\136\003\051\004\060\006\330\022\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\136\003" +
    "\051\004\060\006\333\022\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\337\003" +
    "\051\004\060\022\050\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico_AST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico_AST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico_AST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public NodoAST raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico_AST$actions {




  private final analisis_sintactico_AST parser;

  /** Constructor */
  CUP$analisis_sintactico_AST$actions(analisis_sintactico_AST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_AST$do_action_part00000000(
    int                        CUP$analisis_sintactico_AST$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_AST$parser,
    java.util.Stack            CUP$analisis_sintactico_AST$stack,
    int                        CUP$analisis_sintactico_AST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico_AST$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico_AST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LISTA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST start_val = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico_AST$parser.done_parsing();
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LISTA ::= tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		
            NodoAST padre = new NodoAST("LISTA");
            padre.add(li);
            parser.raiz=padre;
        
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                        NodoAST nodo = new NodoAST("LISTAINSTRUCCIONES");
                        nodo.add(li);
                        nodo.add(ins);
                        RESULT=nodo;
                    
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                        RESULT=ins;
                    
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");nodo.add(a);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");nodo.add(a);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= WHILE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DO_WHILE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= LLAMADA_FUNCION tPuntoComa 
            {
              NodoAST RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= FUNCION_DEFINIDA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= RETURN 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FOR 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= tBreak tPuntoComa 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TERNARIO ::= E tTern E tDosPuntos E 
            {
              NodoAST RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST condicion = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int exprUnoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int exprUnoright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST exprUno = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int exprDosleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int exprDosright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST exprDos = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("TERNARIO");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("TERNARIO",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FOR ::= tFor tParA tId tIn E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		NodoAST nodo = new NodoAST("FOR");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURN ::= tReturn E tPuntoComa 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("RETURN");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTAEXPR ::= LISTAEXPR tComa E 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                   NodoAST nodo = new NodoAST("LISTAEXPR");
                        nodo.add(li);
                        nodo.add(a);
                        RESULT=nodo; 
                
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAEXPR ::= E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                    RESULT=a;
                
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA_FUNCION ::= tId tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA_FUNCION ::= tC tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA_FUNCION ::= tPie tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LLAMADA_FUNCION ::= tBarplot tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LLAMADA_FUNCION ::= tList tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LLAMADA_FUNCION ::= tMatrix tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION_DEFINIDA ::= tId tIgual tFunction tParA LISTAEXPR tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("FUNCION_DEFINIDA");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("FUNCION_DEFINIDA",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WHILE ::= tWhile tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("WHILE");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DO_WHILE ::= tDo tLlaveA LISTAINSTRUCCIONES tLlaveC tWhile tParA E tParC tPuntoComa 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		NodoAST nodo = new NodoAST("DO_WHILE");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SI ::= instruccion_if 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SI ::= instruccion_if instrucciones_elseif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SI ::= instruccion_if instrucciones_elseif instruccion_else 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SI ::= instruccion_if instruccion_else 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion_if ::= tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("instruccion_if");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instruccion_if",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones_elseif ::= instrucciones_elseif instruccion_elseif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("instrucciones_elseif");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones_elseif ::= instruccion_elseif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("instrucciones_elseif");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion_elseif ::= tElse tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("instruccion_elseif");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instruccion_elseif",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion_else ::= tElse tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("instruccion_else ");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instruccion_else",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMPRIMIR ::= tPrint tParA E tParC tPuntoComa 
            {
              NodoAST RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		NodoAST nodo = new NodoAST("IMPRIMIR");
            nodo.add(new NodoAST("print"));
            nodo.add(new NodoAST("("));
            nodo.add(exp);
            nodo.add(new NodoAST(")"));
            nodo.add(new NodoAST(";"));
            RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= tId tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("DECLARACION");nodo.add(new NodoAST(id));nodo.add(new NodoAST("="));nodo.add(exp);nodo.add(new NodoAST(";"));RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= tPunto tId tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("DECLARACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= tId tCorcheA E tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("DECLARACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= tId tCorcheA E tComa E tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= tId tCorcheA E tComa tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= tId tCorcheA tComa E tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= tId tCorcheA tCorcheA E tCorcheC tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= tResta E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("-");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E tModulo E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MODULO");nodo.add(a);nodo.add(new NodoAST("%"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= tDifQ E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("!");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E tSuma E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SUMA");nodo.add(a);nodo.add(new NodoAST("+"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E tResta E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("RESTA");nodo.add(a);nodo.add(new NodoAST("-"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E tMult E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MULTP");nodo.add(a);nodo.add(new NodoAST("*"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E tDiv E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("DIV");nodo.add(a);nodo.add(new NodoAST("/"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E tPow E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("POW");nodo.add(a);nodo.add(new NodoAST("&"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E tIgualIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("IGUAL");nodo.add(a);nodo.add(new NodoAST("=="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E tMenorQ E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MATORQ");nodo.add(a);nodo.add(new NodoAST("<"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E tMayorQ E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MENORQ");nodo.add(a);nodo.add(new NodoAST(">"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E tMenorQ tIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MENORQIGUAL");nodo.add(a);nodo.add(new NodoAST("<="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E tMayorQ tIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MAYORQIGUAL");nodo.add(a);nodo.add(new NodoAST(">="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E tDifQ tIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("DIFQ");nodo.add(a);nodo.add(new NodoAST("!="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E tAnd tAnd E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("AND");nodo.add(a);nodo.add(new NodoAST("&&"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E tOr E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("OR");nodo.add(a);nodo.add(new NodoAST("|"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E tDifQ E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("DIF");nodo.add(a);nodo.add(new NodoAST("!"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E tXor E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("XOR");nodo.add(a);nodo.add(new NodoAST("<="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= tId tCorcheA E tCorcheC tCorcheA E tCorcheC tCorcheA E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo =new NodoAST("POSARRAY[][][]");nodo.add(new NodoAST(a));nodo.add(c);
    nodo.add(d);
    RESULT = nodo;
    
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= tParA E tParC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=a;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= tId tCorcheA tCorcheA E tCorcheC tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		RESULT=new NodoAST("id[[1]]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= tId tCorcheA E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=new NodoAST("id[1]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= tId tCorcheA E tComa E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=new NodoAST("id[1,2]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= tId tCorcheA E tComa tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		RESULT=new NodoAST("id[1,]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= tId tCorcheA tComa E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=new NodoAST("id[,1]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= tId 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= tEntero 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= tTrue 
            {
              NodoAST RESULT =null;
		RESULT=new NodoAST("true");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= tFalse 
            {
              NodoAST RESULT =null;
		RESULT=new NodoAST("false");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= tDoble 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= tCadena 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= LLAMADA_FUNCION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=a;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= TERNARIO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=a;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= FUNCION_DEFINIDA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=a;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico_AST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_AST$do_action(
    int                        CUP$analisis_sintactico_AST$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_AST$parser,
    java.util.Stack            CUP$analisis_sintactico_AST$stack,
    int                        CUP$analisis_sintactico_AST$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico_AST$do_action_part00000000(
                               CUP$analisis_sintactico_AST$act_num,
                               CUP$analisis_sintactico_AST$parser,
                               CUP$analisis_sintactico_AST$stack,
                               CUP$analisis_sintactico_AST$top);
    }
}

}
