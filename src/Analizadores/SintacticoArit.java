
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoArit extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Syma.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoArit() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoArit(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoArit(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\017\005\000\002\005\005\000\002\005\003\000\002\003" +
    "\006\000\002\003\006\000\002\016\013\000\002\014\011" +
    "\000\002\015\013\000\002\012\003\000\002\012\004\000" +
    "\002\012\005\000\002\012\004\000\002\023\011\000\002" +
    "\020\004\000\002\020\003\000\002\021\012\000\002\022" +
    "\006\000\002\011\007\000\002\010\006\000\002\010\007" +
    "\000\002\010\011\000\002\002\004\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\006\000\002\002\006" +
    "\000\002\002\006\000\002\002\006\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\006\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\022\004\026\005\027\006\005\007\007\010" +
    "\012\012\024\016\004\054\022\001\002\000\004\004\217" +
    "\001\002\000\004\034\214\001\002\000\026\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe\016\ufffe" +
    "\021\ufffe\054\ufffe\001\002\000\004\034\206\001\002\000" +
    "\026\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\012\ufffa\016\ufffa\021\ufffa\054\ufffa\001\002\000\026\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7" +
    "\016\ufff7\021\ufff7\054\ufff7\001\002\000\024\004\041\006" +
    "\005\022\040\026\036\031\044\032\046\033\037\034\045" +
    "\046\043\001\002\000\026\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\012\ufffd\016\ufffd\021\ufffd\054\ufffd" +
    "\001\002\000\026\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\012\ufff6\016\ufff6\021\ufff6\054\ufff6\001\002" +
    "\000\024\002\000\004\026\005\027\006\005\007\007\010" +
    "\012\012\024\016\004\054\022\001\002\000\026\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\016" +
    "\ufffc\021\ufffc\054\ufffc\001\002\000\026\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\016\ufff8\021" +
    "\ufff8\054\ufff8\001\002\000\030\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\013\167\016\uffed\021" +
    "\uffed\054\uffed\001\002\000\026\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\012\ufff9\016\ufff9\021\ufff9\054" +
    "\ufff9\001\002\000\004\034\160\001\002\000\026\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\016" +
    "\ufffb\021\ufffb\054\ufffb\001\002\000\004\034\152\001\002" +
    "\000\004\002\151\001\002\000\010\023\140\034\121\037" +
    "\141\001\002\000\004\017\030\001\002\000\022\004\026" +
    "\005\027\006\005\007\007\010\012\012\024\016\004\054" +
    "\022\001\002\000\024\004\026\005\027\006\005\007\007" +
    "\010\012\012\024\016\004\021\033\054\022\001\002\000" +
    "\026\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\012\uffff\016\uffff\021\uffff\054\uffff\001\002\000\004\007" +
    "\034\001\002\000\004\034\035\001\002\000\024\004\041" +
    "\006\005\022\040\026\036\031\044\032\046\033\037\034" +
    "\045\046\043\001\002\000\044\014\uffc9\020\uffc9\024\uffc9" +
    "\030\uffc9\035\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\001\002\000\044\014\uffca\020\uffca\024\uffca\030" +
    "\uffca\035\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\001\002\000\044\014\uffc8\020\uffc8\024\uffc8\030\uffc8" +
    "\035\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\001\002\000\052\014\uffcd\020\uffcd\023\117\024\uffcd\030" +
    "\uffcd\034\121\035\uffcd\037\120\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\001\002\000\044\014\uffc6\020\uffc6" +
    "\024\uffc6\030\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\001\002\000\024\004\041\006\005\022" +
    "\040\026\036\031\044\032\046\033\037\034\045\046\043" +
    "\001\002\000\044\014\uffcc\020\uffcc\024\uffcc\030\uffcc\035" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001" +
    "\002\000\024\004\041\006\005\022\040\026\036\031\044" +
    "\032\046\033\037\034\045\046\043\001\002\000\044\014" +
    "\uffcb\020\uffcb\024\uffcb\030\uffcb\035\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\044\014\uffc7" +
    "\020\uffc7\024\uffc7\030\uffc7\035\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\001\002\000\036\014\065\030" +
    "\063\035\057\040\066\041\062\042\052\043\053\045\056" +
    "\046\055\047\061\050\064\051\054\052\060\053\051\001" +
    "\002\000\026\004\041\006\005\022\040\026\036\031\044" +
    "\032\046\033\037\034\045\037\111\046\043\001\002\000" +
    "\004\042\107\001\002\000\024\004\041\006\005\022\040" +
    "\026\036\031\044\032\046\033\037\034\045\046\043\001" +
    "\002\000\024\004\041\006\005\022\040\026\036\031\044" +
    "\032\046\033\037\034\045\046\043\001\002\000\024\004" +
    "\041\006\005\022\040\026\036\031\044\032\046\033\037" +
    "\034\045\046\043\001\002\000\024\004\041\006\005\022" +
    "\040\026\036\031\044\032\046\033\037\034\045\046\043" +
    "\001\002\000\004\020\102\001\002\000\026\004\041\006" +
    "\005\022\040\026\036\031\044\032\046\033\037\034\045" +
    "\037\077\046\043\001\002\000\024\004\041\006\005\022" +
    "\040\026\036\031\044\032\046\033\037\034\045\046\043" +
    "\001\002\000\024\004\041\006\005\022\040\026\036\031" +
    "\044\032\046\033\037\034\045\046\043\001\002\000\024" +
    "\004\041\006\005\022\040\026\036\031\044\032\046\033" +
    "\037\034\045\046\043\001\002\000\024\004\041\006\005" +
    "\022\040\026\036\031\044\032\046\033\037\034\045\046" +
    "\043\001\002\000\024\004\041\006\005\022\040\026\036" +
    "\031\044\032\046\033\037\034\045\046\043\001\002\000" +
    "\026\004\041\006\005\022\040\026\036\031\044\032\046" +
    "\033\037\034\045\037\067\046\043\001\002\000\024\004" +
    "\041\006\005\022\040\026\036\031\044\032\046\033\037" +
    "\034\045\046\043\001\002\000\044\014\uffd1\020\uffd1\024" +
    "\uffd1\030\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\001\002\000\044\014\uffd4\020\uffd4\024\uffd4" +
    "\030\uffd4\035\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\001\002\000\044\014\uffdf\020\uffdf\024\uffdf\030" +
    "\uffdf\035\uffdf\040\066\041\062\042\052\043\053\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\054\052\060\053" +
    "\051\001\002\000\044\014\uffdb\020\uffdb\024\uffdb\030\uffdb" +
    "\035\uffdb\040\066\041\062\042\052\043\053\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\054\052\060\053\051" +
    "\001\002\000\044\014\uffd9\020\uffd9\024\uffd9\030\uffd9\035" +
    "\uffd9\040\066\041\062\042\052\043\053\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\054\052\060\053\051\001" +
    "\002\000\044\014\uffd2\020\uffd2\024\uffd2\030\uffd2\035\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002" +
    "\000\044\014\uffdc\020\uffdc\024\uffdc\030\uffdc\035\uffdc\040" +
    "\066\041\062\042\052\043\053\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\054\052\060\053\051\001\002\000" +
    "\024\004\041\006\005\022\040\026\036\031\044\032\046" +
    "\033\037\034\045\046\043\001\002\000\044\014\uffd7\020" +
    "\uffd7\024\uffd7\030\uffd7\035\uffd7\040\066\041\062\042\052" +
    "\043\053\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\001\002\000\044\014\uffd5\020\uffd5" +
    "\024\uffd5\030\uffd5\035\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\026\002\uffee\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\012\uffee\016\uffee\021\uffee" +
    "\054\uffee\001\002\000\044\014\065\020\uffde\024\uffde\030" +
    "\063\035\uffde\040\066\041\062\042\052\043\053\044\uffde" +
    "\045\uffde\046\uffde\047\061\050\064\051\054\052\060\053" +
    "\051\001\002\000\044\014\065\020\uffdd\024\uffdd\030\063" +
    "\035\uffdd\040\066\041\062\042\052\043\053\044\uffdd\045" +
    "\uffdd\046\uffdd\047\061\050\064\051\054\052\060\053\051" +
    "\001\002\000\044\014\uffda\020\uffda\024\uffda\030\uffda\035" +
    "\uffda\040\066\041\062\042\052\043\053\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\001" +
    "\002\000\044\014\uffd0\020\uffd0\024\uffd0\030\uffd0\035\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\001\002" +
    "\000\024\004\041\006\005\022\040\026\036\031\044\032" +
    "\046\033\037\034\045\046\043\001\002\000\044\014\uffd3" +
    "\020\uffd3\024\uffd3\030\uffd3\035\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\001\002\000\024\004\041\006" +
    "\005\022\040\026\036\031\044\032\046\033\037\034\045" +
    "\046\043\001\002\000\044\014\uffd8\020\uffd8\024\uffd8\030" +
    "\uffd8\035\uffd8\040\066\041\062\042\052\043\053\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\001\002\000\044\014\uffd6\020\uffd6\024\uffd6\030\uffd6" +
    "\035\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\001\002\000\036\014\065\030\063\035\115\040\066\041" +
    "\062\042\052\043\053\045\056\046\055\047\061\050\064" +
    "\051\054\052\060\053\051\001\002\000\044\014\uffcf\020" +
    "\uffcf\024\uffcf\030\uffcf\035\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\001\002\000\044\014\uffe0\020\uffe0" +
    "\024\uffe0\030\uffe0\035\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\001\002\000\024\004\041\006\005\022" +
    "\040\026\036\031\044\032\046\033\037\034\045\046\043" +
    "\001\002\000\004\027\127\001\002\000\024\004\041\006" +
    "\005\022\040\026\036\031\044\032\046\033\037\034\045" +
    "\046\043\001\002\000\006\035\125\044\124\001\002\000" +
    "\040\014\065\030\063\035\ufff3\040\066\041\062\042\052" +
    "\043\053\044\ufff3\045\056\046\055\047\061\050\064\051" +
    "\054\052\060\053\051\001\002\000\024\004\041\006\005" +
    "\022\040\026\036\031\044\032\046\033\037\034\045\046" +
    "\043\001\002\000\070\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\014\ufff2\016\ufff2\020\ufff2\021" +
    "\ufff2\024\ufff2\030\ufff2\035\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\001\002\000\040\014\065" +
    "\030\063\035\ufff4\040\066\041\062\042\052\043\053\044" +
    "\ufff4\045\056\046\055\047\061\050\064\051\054\052\060" +
    "\053\051\001\002\000\004\034\130\001\002\000\024\004" +
    "\041\006\005\022\040\026\036\031\044\032\046\033\037" +
    "\034\045\046\043\001\002\000\006\035\132\044\124\001" +
    "\002\000\004\017\133\001\002\000\022\004\026\005\027" +
    "\006\005\007\007\010\012\012\024\016\004\054\022\001" +
    "\002\000\024\004\026\005\027\006\005\007\007\010\012" +
    "\012\024\016\004\021\135\054\022\001\002\000\070\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0" +
    "\014\ufff0\016\ufff0\020\ufff0\021\ufff0\024\ufff0\030\ufff0\035" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\001\002\000\036\014\065\024\137\030\063\040\066" +
    "\041\062\042\052\043\053\045\056\046\055\047\061\050" +
    "\064\051\054\052\060\053\051\001\002\000\044\014\uffce" +
    "\020\uffce\024\uffce\030\uffce\035\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\001\002\000\024\004\041\006" +
    "\005\022\040\026\036\031\044\032\046\033\037\034\045" +
    "\046\043\001\002\000\026\004\041\006\005\022\040\026" +
    "\036\027\127\031\044\032\046\033\037\034\045\046\043" +
    "\001\002\000\036\014\065\020\143\030\063\040\066\041" +
    "\062\042\052\043\053\045\056\046\055\047\061\050\064" +
    "\051\054\052\060\053\051\001\002\000\026\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\016\uffe3" +
    "\021\uffe3\054\uffe3\001\002\000\036\014\065\024\145\030" +
    "\063\040\066\041\062\042\052\043\053\045\056\046\055" +
    "\047\061\050\064\051\054\052\060\053\051\001\002\000" +
    "\004\037\146\001\002\000\024\004\041\006\005\022\040" +
    "\026\036\031\044\032\046\033\037\034\045\046\043\001" +
    "\002\000\036\014\065\020\150\030\063\040\066\041\062" +
    "\042\052\043\053\045\056\046\055\047\061\050\064\051" +
    "\054\052\060\053\051\001\002\000\026\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\016\uffe1\021" +
    "\uffe1\054\uffe1\001\002\000\004\002\001\001\002\000\024" +
    "\004\041\006\005\022\040\026\036\031\044\032\046\033" +
    "\037\034\045\046\043\001\002\000\036\014\065\030\063" +
    "\035\154\040\066\041\062\042\052\043\053\045\056\046" +
    "\055\047\061\050\064\051\054\052\060\053\051\001\002" +
    "\000\004\017\155\001\002\000\022\004\026\005\027\006" +
    "\005\007\007\010\012\012\024\016\004\054\022\001\002" +
    "\000\024\004\026\005\027\006\005\007\007\010\012\012" +
    "\024\016\004\021\157\054\022\001\002\000\030\002\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013" +
    "\uffe9\016\uffe9\021\uffe9\054\uffe9\001\002\000\024\004\041" +
    "\006\005\022\040\026\036\031\044\032\046\033\037\034" +
    "\045\046\043\001\002\000\036\014\065\030\063\035\162" +
    "\040\066\041\062\042\052\043\053\045\056\046\055\047" +
    "\061\050\064\051\054\052\060\053\051\001\002\000\004" +
    "\020\163\001\002\000\026\002\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\016\uffe4\021\uffe4\054\uffe4" +
    "\001\002\000\026\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\012\uffea\016\uffea\021\uffea\054\uffea\001\002" +
    "\000\030\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\012\uffe7\013\uffe7\016\uffe7\021\uffe7\054\uffe7\001\002" +
    "\000\030\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\012\uffec\013\167\016\uffec\021\uffec\054\uffec\001\002" +
    "\000\006\012\171\017\170\001\002\000\022\004\026\005" +
    "\027\006\005\007\007\010\012\012\024\016\004\054\022" +
    "\001\002\000\004\034\172\001\002\000\024\004\041\006" +
    "\005\022\040\026\036\031\044\032\046\033\037\034\045" +
    "\046\043\001\002\000\036\014\065\030\063\035\174\040" +
    "\066\041\062\042\052\043\053\045\056\046\055\047\061" +
    "\050\064\051\054\052\060\053\051\001\002\000\004\017" +
    "\175\001\002\000\022\004\026\005\027\006\005\007\007" +
    "\010\012\012\024\016\004\054\022\001\002\000\024\004" +
    "\026\005\027\006\005\007\007\010\012\012\024\016\004" +
    "\021\177\054\022\001\002\000\030\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\016\uffe6" +
    "\021\uffe6\054\uffe6\001\002\000\024\004\026\005\027\006" +
    "\005\007\007\010\012\012\024\016\004\021\201\054\022" +
    "\001\002\000\026\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\012\uffe5\016\uffe5\021\uffe5\054\uffe5\001\002" +
    "\000\026\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\012\uffeb\016\uffeb\021\uffeb\054\uffeb\001\002\000\030" +
    "\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012" +
    "\uffe8\013\uffe8\016\uffe8\021\uffe8\054\uffe8\001\002\000\036" +
    "\014\065\020\205\030\063\040\066\041\062\042\052\043" +
    "\053\045\056\046\055\047\061\050\064\051\054\052\060" +
    "\053\051\001\002\000\026\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\012\ufff5\016\ufff5\021\ufff5\054\ufff5" +
    "\001\002\000\024\004\041\006\005\022\040\026\036\031" +
    "\044\032\046\033\037\034\045\046\043\001\002\000\036" +
    "\014\065\030\063\035\210\040\066\041\062\042\052\043" +
    "\053\045\056\046\055\047\061\050\064\051\054\052\060" +
    "\053\051\001\002\000\004\017\211\001\002\000\022\004" +
    "\026\005\027\006\005\007\007\010\012\012\024\016\004" +
    "\054\022\001\002\000\024\004\026\005\027\006\005\007" +
    "\007\010\012\012\024\016\004\021\213\054\022\001\002" +
    "\000\026\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\012\uffef\016\uffef\021\uffef\054\uffef\001\002\000\024" +
    "\004\041\006\005\022\040\026\036\031\044\032\046\033" +
    "\037\034\045\046\043\001\002\000\006\035\216\044\124" +
    "\001\002\000\070\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\012\ufff1\014\ufff1\016\ufff1\020\ufff1\021\ufff1" +
    "\024\ufff1\030\ufff1\035\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\001\002\000\004\037\220\001" +
    "\002\000\024\004\041\006\005\022\040\026\036\031\044" +
    "\032\046\033\037\034\045\046\043\001\002\000\036\014" +
    "\065\020\222\030\063\040\066\041\062\042\052\043\053" +
    "\045\056\046\055\047\061\050\064\051\054\052\060\053" +
    "\051\001\002\000\026\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\012\uffe2\016\uffe2\021\uffe2\054\uffe2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\032\003\016\004\005\006\024\007\014\010" +
    "\012\011\015\012\022\014\007\015\020\016\010\017\013" +
    "\023\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\203\003\046\016\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\016\004\031" +
    "\010\012\011\015\012\022\014\007\015\020\016\010\017" +
    "\013\023\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\165\021\164\022\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\016\004\005\007\030\010\012\011\015\012\022" +
    "\014\007\015\020\016\010\017\013\023\017\001\001\000" +
    "\026\003\016\004\031\010\012\011\015\012\022\014\007" +
    "\015\020\016\010\017\013\023\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\047" +
    "\003\046\016\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\115\003\046\016\041\001\001\000\002\001" +
    "\001\000\010\002\113\003\046\016\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\111\003\046\016\041\001\001\000\002\001\001\000\010" +
    "\002\105\003\046\016\041\001\001\000\010\002\104\003" +
    "\046\016\041\001\001\000\010\002\103\003\046\016\041" +
    "\001\001\000\010\002\102\003\046\016\041\001\001\000" +
    "\002\001\001\000\010\002\077\003\046\016\041\001\001" +
    "\000\010\002\075\003\046\016\041\001\001\000\010\002" +
    "\074\003\046\016\041\001\001\000\010\002\073\003\046" +
    "\016\041\001\001\000\010\002\072\003\046\016\041\001" +
    "\001\000\010\002\071\003\046\016\041\001\001\000\010" +
    "\002\067\003\046\016\041\001\001\000\010\002\070\003" +
    "\046\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\100\003\046" +
    "\016\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\107\003\046\016" +
    "\041\001\001\000\002\001\001\000\010\002\112\003\046" +
    "\016\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\135\003\046\016\041\001\001\000\002\001\001\000" +
    "\012\002\122\003\046\005\121\016\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\125\003\046\016" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\122\003\046\005\130\016\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\016" +
    "\004\005\007\133\010\012\011\015\012\022\014\007\015" +
    "\020\016\010\017\013\023\017\001\001\000\026\003\016" +
    "\004\031\010\012\011\015\012\022\014\007\015\020\016" +
    "\010\017\013\023\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\143\003\046\016" +
    "\041\001\001\000\010\002\141\003\046\016\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\146\003\046\016\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\152\003\046\016\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\016\004\005\007\155\010" +
    "\012\011\015\012\022\014\007\015\020\016\010\017\013" +
    "\023\017\001\001\000\026\003\016\004\031\010\012\011" +
    "\015\012\022\014\007\015\020\016\010\017\013\023\017" +
    "\001\001\000\002\001\001\000\010\002\160\003\046\016" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\202\022\201\001\001\000\002\001\001\000\030\003\016" +
    "\004\005\007\177\010\012\011\015\012\022\014\007\015" +
    "\020\016\010\017\013\023\017\001\001\000\002\001\001" +
    "\000\010\002\172\003\046\016\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\016\004\005\007\175" +
    "\010\012\011\015\012\022\014\007\015\020\016\010\017" +
    "\013\023\017\001\001\000\026\003\016\004\031\010\012" +
    "\011\015\012\022\014\007\015\020\016\010\017\013\023" +
    "\017\001\001\000\002\001\001\000\026\003\016\004\031" +
    "\010\012\011\015\012\022\014\007\015\020\016\010\017" +
    "\013\023\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\206\003\046\016\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\016\004\005\007\211\010" +
    "\012\011\015\012\022\014\007\015\020\016\010\017\013" +
    "\023\017\001\001\000\026\003\016\004\031\010\012\011" +
    "\015\012\022\014\007\015\020\016\010\017\013\023\017" +
    "\001\001\000\002\001\001\000\012\002\122\003\046\005" +
    "\214\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\220\003\046\016\041\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoArit$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoArit$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoArit$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Instruccion> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoArit$actions {




  private final SintacticoArit parser;

  /** Constructor */
  CUP$SintacticoArit$actions(SintacticoArit parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action_part00000000(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoArit$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoArit$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LISTA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoArit$parser.done_parsing();
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LISTA ::= LISTAINSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
            parser.resultado=li;
        
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT=li;
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT = new LinkedList<>();
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= LLAMADA_FUNCION 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) exp;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION_DEFINIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= RETURN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RETURN ::= tReturn E tPuntoComa 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Return(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("RETURN",13, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTAEXPR ::= LISTAEXPR tComa E 
            {
              LinkedList<Expresion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		LinkedList<Expresion> li = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT=li;
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAEXPR ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LLAMADA_FUNCION ::= tId tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> e1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion(id,e1);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LLAMADA_FUNCION ::= tC tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("c",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION_DEFINIDA ::= tId tIgual tFunction tParA LISTAEXPR tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new FuncionPropia(id,Simbolo.EnumTipoDato.FUNCION,li,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("FUNCION_DEFINIDA",12, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // WHILE ::= tWhile tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DO_WHILE ::= tDo tLlaveA LISTAINSTRUCCIONES tLlaveC tWhile tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SI ::= instruccion_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SI ::= instruccion_if instrucciones_elseif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SI ::= instruccion_if instrucciones_elseif instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b,c);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SI ::= instruccion_if instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion_if ::= tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_if",17, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones_elseif ::= instrucciones_elseif instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",14, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones_elseif ::= instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",14, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion_elseif ::= tElse tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_elseif",15, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion_else ::= tElse tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_else",16, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IMPRIMIR ::= tPrint tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		 RESULT=new Imprimir(exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= tPunto tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= tId tCorcheA E tCorcheC tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Declaracion(id,a,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E tModulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E tSuma E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E tMult E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E tDiv E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E tPow E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E tIgualIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E tMenorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E tMayorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E tMenorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E tMayorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E tDifQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E tAnd tAnd E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E tOr E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E tDifQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOT);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E tXor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= tParA E tParC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= tId tCorcheA E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR_POS_ARRAY,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= tTrue 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("true",Tipo_operacion.TRUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= tFalse 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("false",Tipo_operacion.FALSE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= tDoble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.CADENA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= FUNCION_DEFINIDA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Expresion)a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoArit$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoArit$do_action_part00000000(
                               CUP$SintacticoArit$act_num,
                               CUP$SintacticoArit$parser,
                               CUP$SintacticoArit$stack,
                               CUP$SintacticoArit$top);
    }
}

}
