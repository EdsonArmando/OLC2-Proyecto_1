
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoArit extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Syma.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoArit() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoArit(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoArit(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\017\005\000\002\005\005\000\002\005\003\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\016\013\000\002\014\011\000\002\015\013\000" +
    "\002\012\003\000\002\012\004\000\002\012\005\000\002" +
    "\012\004\000\002\023\011\000\002\020\004\000\002\020" +
    "\003\000\002\021\012\000\002\022\006\000\002\011\007" +
    "\000\002\010\006\000\002\010\007\000\002\010\011\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\006\000\002\002\006\000\002\002\006\000" +
    "\002\002\006\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\006\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\026\004\030\005\010\006\023\007\031\010" +
    "\005\011\007\012\013\014\026\020\004\056\024\001\002" +
    "\000\004\004\227\001\002\000\004\036\224\001\002\000" +
    "\032\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\014\ufffe\020\ufffe\023\ufffe\056\ufffe\001" +
    "\002\000\004\036\216\001\002\000\004\036\213\001\002" +
    "\000\032\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\020\ufffa\023\ufffa\056\ufffa" +
    "\001\002\000\032\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\020\ufff7\023\ufff7" +
    "\056\ufff7\001\002\000\030\004\043\005\010\006\023\010" +
    "\005\024\042\030\040\033\046\034\050\035\041\036\047" +
    "\050\045\001\002\000\032\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\020\ufffd" +
    "\023\ufffd\056\ufffd\001\002\000\032\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\020\ufff6\023\ufff6\056\ufff6\001\002\000\030\002\000\004" +
    "\030\005\010\006\023\007\031\010\005\011\007\012\013" +
    "\014\026\020\004\056\024\001\002\000\032\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\014\ufffc\020\ufffc\023\ufffc\056\ufffc\001\002\000\032\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\020\ufff8\023\ufff8\056\ufff8\001\002\000" +
    "\034\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\014\uffeb\015\174\020\uffeb\023\uffeb\056" +
    "\uffeb\001\002\000\032\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\020\ufff9\023" +
    "\ufff9\056\ufff9\001\002\000\004\036\166\001\002\000\004" +
    "\036\162\001\002\000\032\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\020\ufffb" +
    "\023\ufffb\056\ufffb\001\002\000\004\036\154\001\002\000" +
    "\004\002\153\001\002\000\010\025\142\036\123\041\143" +
    "\001\002\000\004\021\032\001\002\000\026\004\030\005" +
    "\010\006\023\007\031\010\005\011\007\012\013\014\026" +
    "\020\004\056\024\001\002\000\030\004\030\005\010\006" +
    "\023\007\031\010\005\011\007\012\013\014\026\020\004" +
    "\023\035\056\024\001\002\000\032\002\uffff\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\014\uffff" +
    "\020\uffff\023\uffff\056\uffff\001\002\000\004\011\036\001" +
    "\002\000\004\036\037\001\002\000\030\004\043\005\010" +
    "\006\023\010\005\024\042\030\040\033\046\034\050\035" +
    "\041\036\047\050\045\001\002\000\044\016\uffc7\022\uffc7" +
    "\026\uffc7\032\uffc7\037\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\001\002\000\044\016\uffc8\022\uffc8\026" +
    "\uffc8\032\uffc8\037\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\001\002\000\044\016\uffc6\022\uffc6\026\uffc6" +
    "\032\uffc6\037\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\001\002\000\052\016\uffcb\022\uffcb\025\121\026" +
    "\uffcb\032\uffcb\036\123\037\uffcb\041\122\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\001\002\000\044\016\uffc4" +
    "\022\uffc4\026\uffc4\032\uffc4\037\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\001\002\000\030\004\043\005" +
    "\010\006\023\010\005\024\042\030\040\033\046\034\050" +
    "\035\041\036\047\050\045\001\002\000\044\016\uffca\022" +
    "\uffca\026\uffca\032\uffca\037\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\001\002\000\030\004\043\005\010" +
    "\006\023\010\005\024\042\030\040\033\046\034\050\035" +
    "\041\036\047\050\045\001\002\000\044\016\uffc9\022\uffc9" +
    "\026\uffc9\032\uffc9\037\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\001\002\000\044\016\uffc5\022\uffc5\026" +
    "\uffc5\032\uffc5\037\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\001\002\000\036\016\067\032\065\037\060" +
    "\042\070\043\064\044\054\045\055\047\061\050\057\051" +
    "\063\052\066\053\056\054\062\055\053\001\002\000\032" +
    "\004\043\005\010\006\023\010\005\024\042\030\040\033" +
    "\046\034\050\035\041\036\047\041\113\050\045\001\002" +
    "\000\004\044\111\001\002\000\030\004\043\005\010\006" +
    "\023\010\005\024\042\030\040\033\046\034\050\035\041" +
    "\036\047\050\045\001\002\000\030\004\043\005\010\006" +
    "\023\010\005\024\042\030\040\033\046\034\050\035\041" +
    "\036\047\050\045\001\002\000\030\004\043\005\010\006" +
    "\023\010\005\024\042\030\040\033\046\034\050\035\041" +
    "\036\047\050\045\001\002\000\004\022\105\001\002\000" +
    "\030\004\043\005\010\006\023\010\005\024\042\030\040" +
    "\033\046\034\050\035\041\036\047\050\045\001\002\000" +
    "\032\004\043\005\010\006\023\010\005\024\042\030\040" +
    "\033\046\034\050\035\041\036\047\041\101\050\045\001" +
    "\002\000\030\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\050\045\001" +
    "\002\000\030\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\050\045\001" +
    "\002\000\030\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\050\045\001" +
    "\002\000\030\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\050\045\001" +
    "\002\000\030\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\050\045\001" +
    "\002\000\032\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\041\071\050" +
    "\045\001\002\000\030\004\043\005\010\006\023\010\005" +
    "\024\042\030\040\033\046\034\050\035\041\036\047\050" +
    "\045\001\002\000\044\016\uffcf\022\uffcf\026\uffcf\032\uffcf" +
    "\037\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\001\002\000\044\016\uffd2\022\uffd2\026\uffd2\032\uffd2\037" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\001" +
    "\002\000\044\016\uffdd\022\uffdd\026\uffdd\032\uffdd\037\uffdd" +
    "\042\070\043\064\044\054\045\055\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\056\054\062\055\053\001\002" +
    "\000\044\016\uffd9\022\uffd9\026\uffd9\032\uffd9\037\uffd9\042" +
    "\070\043\064\044\054\045\055\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\056\054\062\055\053\001\002\000" +
    "\044\016\uffd7\022\uffd7\026\uffd7\032\uffd7\037\uffd7\042\070" +
    "\043\064\044\054\045\055\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\056\054\062\055\053\001\002\000\044" +
    "\016\uffd0\022\uffd0\026\uffd0\032\uffd0\037\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002\000\044\016" +
    "\uffda\022\uffda\026\uffda\032\uffda\037\uffda\042\070\043\064" +
    "\044\054\045\055\046\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\056\054\062\055\053\001\002\000\030\004\043" +
    "\005\010\006\023\010\005\024\042\030\040\033\046\034" +
    "\050\035\041\036\047\050\045\001\002\000\044\016\uffd5" +
    "\022\uffd5\026\uffd5\032\uffd5\037\uffd5\042\070\043\064\044" +
    "\054\045\055\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\001\002\000\044\016\uffd3\022" +
    "\uffd3\026\uffd3\032\uffd3\037\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\001\002\000\044\016\067\022\uffdc" +
    "\026\uffdc\032\065\037\uffdc\042\070\043\064\044\054\045" +
    "\055\046\uffdc\047\uffdc\050\uffdc\051\063\052\066\053\056" +
    "\054\062\055\053\001\002\000\032\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec" +
    "\020\uffec\023\uffec\056\uffec\001\002\000\044\016\067\022" +
    "\uffdb\026\uffdb\032\065\037\uffdb\042\070\043\064\044\054" +
    "\045\055\046\uffdb\047\uffdb\050\uffdb\051\063\052\066\053" +
    "\056\054\062\055\053\001\002\000\044\016\uffd8\022\uffd8" +
    "\026\uffd8\032\uffd8\037\uffd8\042\070\043\064\044\054\045" +
    "\055\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\001\002\000\044\016\uffce\022\uffce\026" +
    "\uffce\032\uffce\037\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\001\002\000\030\004\043\005\010\006\023" +
    "\010\005\024\042\030\040\033\046\034\050\035\041\036" +
    "\047\050\045\001\002\000\044\016\uffd1\022\uffd1\026\uffd1" +
    "\032\uffd1\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\001\002\000\030\004\043\005\010\006\023\010" +
    "\005\024\042\030\040\033\046\034\050\035\041\036\047" +
    "\050\045\001\002\000\044\016\uffd6\022\uffd6\026\uffd6\032" +
    "\uffd6\037\uffd6\042\070\043\064\044\054\045\055\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\001\002\000\044\016\uffd4\022\uffd4\026\uffd4\032\uffd4" +
    "\037\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\001\002\000\036\016\067\032\065\037\117\042\070\043" +
    "\064\044\054\045\055\047\061\050\057\051\063\052\066" +
    "\053\056\054\062\055\053\001\002\000\044\016\uffcd\022" +
    "\uffcd\026\uffcd\032\uffcd\037\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\001\002\000\044\016\uffde\022\uffde" +
    "\026\uffde\032\uffde\037\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\001\002\000\030\004\043\005\010\006" +
    "\023\010\005\024\042\030\040\033\046\034\050\035\041" +
    "\036\047\050\045\001\002\000\004\031\131\001\002\000" +
    "\030\004\043\005\010\006\023\010\005\024\042\030\040" +
    "\033\046\034\050\035\041\036\047\050\045\001\002\000" +
    "\006\037\127\046\126\001\002\000\040\016\067\032\065" +
    "\037\ufff3\042\070\043\064\044\054\045\055\046\ufff3\047" +
    "\061\050\057\051\063\052\066\053\056\054\062\055\053" +
    "\001\002\000\030\004\043\005\010\006\023\010\005\024" +
    "\042\030\040\033\046\034\050\035\041\036\047\050\045" +
    "\001\002\000\074\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\016\ufff2\020\ufff2" +
    "\022\ufff2\023\ufff2\026\ufff2\032\ufff2\037\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000" +
    "\040\016\067\032\065\037\ufff4\042\070\043\064\044\054" +
    "\045\055\046\ufff4\047\061\050\057\051\063\052\066\053" +
    "\056\054\062\055\053\001\002\000\004\036\132\001\002" +
    "\000\030\004\043\005\010\006\023\010\005\024\042\030" +
    "\040\033\046\034\050\035\041\036\047\050\045\001\002" +
    "\000\006\037\134\046\126\001\002\000\004\021\135\001" +
    "\002\000\026\004\030\005\010\006\023\007\031\010\005" +
    "\011\007\012\013\014\026\020\004\056\024\001\002\000" +
    "\030\004\030\005\010\006\023\007\031\010\005\011\007" +
    "\012\013\014\026\020\004\023\137\056\024\001\002\000" +
    "\074\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\016\uffee\020\uffee\022\uffee\023" +
    "\uffee\026\uffee\032\uffee\037\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\001\002\000\036\016\067" +
    "\026\141\032\065\042\070\043\064\044\054\045\055\047" +
    "\061\050\057\051\063\052\066\053\056\054\062\055\053" +
    "\001\002\000\044\016\uffcc\022\uffcc\026\uffcc\032\uffcc\037" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\001" +
    "\002\000\030\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\050\045\001" +
    "\002\000\032\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\031\131\033\046\034\050\035\041\036\047\050" +
    "\045\001\002\000\036\016\067\022\145\032\065\042\070" +
    "\043\064\044\054\045\055\047\061\050\057\051\063\052" +
    "\066\053\056\054\062\055\053\001\002\000\032\002\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\014\uffe1\020\uffe1\023\uffe1\056\uffe1\001\002\000\036" +
    "\016\067\026\147\032\065\042\070\043\064\044\054\045" +
    "\055\047\061\050\057\051\063\052\066\053\056\054\062" +
    "\055\053\001\002\000\004\041\150\001\002\000\030\004" +
    "\043\005\010\006\023\010\005\024\042\030\040\033\046" +
    "\034\050\035\041\036\047\050\045\001\002\000\036\016" +
    "\067\022\152\032\065\042\070\043\064\044\054\045\055" +
    "\047\061\050\057\051\063\052\066\053\056\054\062\055" +
    "\053\001\002\000\032\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\020\uffdf\023" +
    "\uffdf\056\uffdf\001\002\000\004\002\001\001\002\000\030" +
    "\004\043\005\010\006\023\010\005\024\042\030\040\033" +
    "\046\034\050\035\041\036\047\050\045\001\002\000\036" +
    "\016\067\032\065\037\156\042\070\043\064\044\054\045" +
    "\055\047\061\050\057\051\063\052\066\053\056\054\062" +
    "\055\053\001\002\000\004\021\157\001\002\000\026\004" +
    "\030\005\010\006\023\007\031\010\005\011\007\012\013" +
    "\014\026\020\004\056\024\001\002\000\030\004\030\005" +
    "\010\006\023\007\031\010\005\011\007\012\013\014\026" +
    "\020\004\023\161\056\024\001\002\000\034\002\uffe7\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\014\uffe7\015\uffe7\020\uffe7\023\uffe7\056\uffe7\001\002\000" +
    "\030\004\043\005\010\006\023\010\005\024\042\030\040" +
    "\033\046\034\050\035\041\036\047\050\045\001\002\000" +
    "\036\016\067\032\065\037\164\042\070\043\064\044\054" +
    "\045\055\047\061\050\057\051\063\052\066\053\056\054" +
    "\062\055\053\001\002\000\004\022\165\001\002\000\032" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\020\uffe2\023\uffe2\056\uffe2\001\002" +
    "\000\030\004\043\005\010\006\023\010\005\024\042\030" +
    "\040\033\046\034\050\035\041\036\047\050\045\001\002" +
    "\000\006\037\170\046\126\001\002\000\074\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\016\ufff0\020\ufff0\022\ufff0\023\ufff0\026\ufff0\032" +
    "\ufff0\037\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\001\002\000\032\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\020" +
    "\uffe8\023\uffe8\056\uffe8\001\002\000\034\002\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\020\uffe5\023\uffe5\056\uffe5\001\002\000\034" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\014\uffea\015\174\020\uffea\023\uffea\056\uffea" +
    "\001\002\000\006\014\176\021\175\001\002\000\026\004" +
    "\030\005\010\006\023\007\031\010\005\011\007\012\013" +
    "\014\026\020\004\056\024\001\002\000\004\036\177\001" +
    "\002\000\030\004\043\005\010\006\023\010\005\024\042" +
    "\030\040\033\046\034\050\035\041\036\047\050\045\001" +
    "\002\000\036\016\067\032\065\037\201\042\070\043\064" +
    "\044\054\045\055\047\061\050\057\051\063\052\066\053" +
    "\056\054\062\055\053\001\002\000\004\021\202\001\002" +
    "\000\026\004\030\005\010\006\023\007\031\010\005\011" +
    "\007\012\013\014\026\020\004\056\024\001\002\000\030" +
    "\004\030\005\010\006\023\007\031\010\005\011\007\012" +
    "\013\014\026\020\004\023\204\056\024\001\002\000\034" +
    "\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\014\uffe4\015\uffe4\020\uffe4\023\uffe4\056\uffe4" +
    "\001\002\000\030\004\030\005\010\006\023\007\031\010" +
    "\005\011\007\012\013\014\026\020\004\023\206\056\024" +
    "\001\002\000\032\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\020\uffe3\023\uffe3" +
    "\056\uffe3\001\002\000\032\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\020\uffe9" +
    "\023\uffe9\056\uffe9\001\002\000\034\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6" +
    "\015\uffe6\020\uffe6\023\uffe6\056\uffe6\001\002\000\036\016" +
    "\067\022\212\032\065\042\070\043\064\044\054\045\055" +
    "\047\061\050\057\051\063\052\066\053\056\054\062\055" +
    "\053\001\002\000\032\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\020\ufff5\023" +
    "\ufff5\056\ufff5\001\002\000\030\004\043\005\010\006\023" +
    "\010\005\024\042\030\040\033\046\034\050\035\041\036" +
    "\047\050\045\001\002\000\006\037\215\046\126\001\002" +
    "\000\074\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\014\uffef\016\uffef\020\uffef\022\uffef" +
    "\023\uffef\026\uffef\032\uffef\037\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\001\002\000\030\004" +
    "\043\005\010\006\023\010\005\024\042\030\040\033\046" +
    "\034\050\035\041\036\047\050\045\001\002\000\036\016" +
    "\067\032\065\037\220\042\070\043\064\044\054\045\055" +
    "\047\061\050\057\051\063\052\066\053\056\054\062\055" +
    "\053\001\002\000\004\021\221\001\002\000\026\004\030" +
    "\005\010\006\023\007\031\010\005\011\007\012\013\014" +
    "\026\020\004\056\024\001\002\000\030\004\030\005\010" +
    "\006\023\007\031\010\005\011\007\012\013\014\026\020" +
    "\004\023\223\056\024\001\002\000\032\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\014" +
    "\uffed\020\uffed\023\uffed\056\uffed\001\002\000\030\004\043" +
    "\005\010\006\023\010\005\024\042\030\040\033\046\034" +
    "\050\035\041\036\047\050\045\001\002\000\006\037\226" +
    "\046\126\001\002\000\074\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\016\ufff1" +
    "\020\ufff1\022\ufff1\023\ufff1\026\ufff1\032\ufff1\037\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\001" +
    "\002\000\004\041\230\001\002\000\030\004\043\005\010" +
    "\006\023\010\005\024\042\030\040\033\046\034\050\035" +
    "\041\036\047\050\045\001\002\000\036\016\067\022\232" +
    "\032\065\042\070\043\064\044\054\045\055\047\061\050" +
    "\057\051\063\052\066\053\056\054\062\055\053\001\002" +
    "\000\032\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\014\uffe0\020\uffe0\023\uffe0\056\uffe0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\032\003\017\004\005\006\026\007\015\010" +
    "\013\011\016\012\024\014\010\015\021\016\011\017\014" +
    "\023\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\210\003\050\016" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\017\004\033\010\013\011\016\012\024\014\010\015" +
    "\021\016\011\017\014\023\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\172\021\171\022\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\017\004\005" +
    "\007\032\010\013\011\016\012\024\014\010\015\021\016" +
    "\011\017\014\023\020\001\001\000\026\003\017\004\033" +
    "\010\013\011\016\012\024\014\010\015\021\016\011\017" +
    "\014\023\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\051\003\050\016\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\117\003" +
    "\050\016\043\001\001\000\002\001\001\000\010\002\115" +
    "\003\050\016\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\113\003\050\016\043" +
    "\001\001\000\002\001\001\000\010\002\107\003\050\016" +
    "\043\001\001\000\010\002\106\003\050\016\043\001\001" +
    "\000\010\002\105\003\050\016\043\001\001\000\002\001" +
    "\001\000\010\002\103\003\050\016\043\001\001\000\010" +
    "\002\101\003\050\016\043\001\001\000\010\002\077\003" +
    "\050\016\043\001\001\000\010\002\076\003\050\016\043" +
    "\001\001\000\010\002\075\003\050\016\043\001\001\000" +
    "\010\002\074\003\050\016\043\001\001\000\010\002\073" +
    "\003\050\016\043\001\001\000\010\002\071\003\050\016" +
    "\043\001\001\000\010\002\072\003\050\016\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\102\003\050\016\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\111\003\050\016\043\001\001\000\002" +
    "\001\001\000\010\002\114\003\050\016\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\137\003\050\016" +
    "\043\001\001\000\002\001\001\000\012\002\124\003\050" +
    "\005\123\016\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\127\003\050\016\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\124\003\050\005\132\016\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\017\004\005\007\135\010" +
    "\013\011\016\012\024\014\010\015\021\016\011\017\014" +
    "\023\020\001\001\000\026\003\017\004\033\010\013\011" +
    "\016\012\024\014\010\015\021\016\011\017\014\023\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\145\003\050\016\043\001\001\000\010" +
    "\002\143\003\050\016\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\150\003\050\016\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\154\003\050" +
    "\016\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\017\004\005\007\157\010\013\011\016\012\024" +
    "\014\010\015\021\016\011\017\014\023\020\001\001\000" +
    "\026\003\017\004\033\010\013\011\016\012\024\014\010" +
    "\015\021\016\011\017\014\023\020\001\001\000\002\001" +
    "\001\000\010\002\162\003\050\016\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\124\003\050\005\166\016\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\207\022\206\001\001\000\002\001\001\000\030" +
    "\003\017\004\005\007\204\010\013\011\016\012\024\014" +
    "\010\015\021\016\011\017\014\023\020\001\001\000\002" +
    "\001\001\000\010\002\177\003\050\016\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\017\004\005" +
    "\007\202\010\013\011\016\012\024\014\010\015\021\016" +
    "\011\017\014\023\020\001\001\000\026\003\017\004\033" +
    "\010\013\011\016\012\024\014\010\015\021\016\011\017" +
    "\014\023\020\001\001\000\002\001\001\000\026\003\017" +
    "\004\033\010\013\011\016\012\024\014\010\015\021\016" +
    "\011\017\014\023\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\124\003\050\005\213\016\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\216\003" +
    "\050\016\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\017\004\005\007\221\010\013\011\016\012" +
    "\024\014\010\015\021\016\011\017\014\023\020\001\001" +
    "\000\026\003\017\004\033\010\013\011\016\012\024\014" +
    "\010\015\021\016\011\017\014\023\020\001\001\000\002" +
    "\001\001\000\012\002\124\003\050\005\224\016\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\230\003\050\016\043\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoArit$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoArit$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoArit$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Instruccion> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoArit$actions {




  private final SintacticoArit parser;

  /** Constructor */
  CUP$SintacticoArit$actions(SintacticoArit parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action_part00000000(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoArit$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoArit$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LISTA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoArit$parser.done_parsing();
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LISTA ::= LISTAINSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
            parser.resultado=li;
        
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT=li;
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                        RESULT = new LinkedList<>();
                        RESULT.add(ins);
                    
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= LLAMADA_FUNCION 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) exp;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FUNCION_DEFINIDA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Instruccion) a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= RETURN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RETURN ::= tReturn E tPuntoComa 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Return(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("RETURN",13, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTAEXPR ::= LISTAEXPR tComa E 
            {
              LinkedList<Expresion> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		LinkedList<Expresion> li = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT=li;
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAEXPR ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(a);
                
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LLAMADA_FUNCION ::= tId tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> e1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion(id,e1);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LLAMADA_FUNCION ::= tC tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("c",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LLAMADA_FUNCION ::= tList tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("list",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA_FUNCION ::= tMatrix tParA LISTAEXPR tParC 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Expresion> el = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT = new LlamadaFuncion("matrix",el);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION_DEFINIDA ::= tId tIgual tFunction tParA LISTAEXPR tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new FuncionPropia(id,Simbolo.EnumTipoDato.FUNCION,li,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("FUNCION_DEFINIDA",12, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // WHILE ::= tWhile tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DO_WHILE ::= tDo tLlaveA LISTAINSTRUCCIONES tLlaveC tWhile tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		LinkedList<Instruccion> li = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		RESULT=new While((Operacion)a,li);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SI ::= instruccion_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SI ::= instruccion_if instrucciones_elseif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SI ::= instruccion_if instrucciones_elseif instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> b = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b,c);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SI ::= instruccion_if instruccion_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new If(a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("SI",8, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion_if ::= tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_if",17, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones_elseif ::= instrucciones_elseif instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf b = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",14, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciones_elseif ::= instruccion_elseif 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		SubIf a = (SubIf)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",14, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion_elseif ::= tElse tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf((Operacion)a,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_elseif",15, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion_else ::= tElse tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new SubIf(a);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("instruccion_else",16, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRIMIR ::= tPrint tParA E tParC tPuntoComa 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		 RESULT=new Imprimir(exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= tPunto tId tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT= new Declaracion(id,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= tId tCorcheA E tCorcheC tIgual E tPuntoComa 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Declaracion(id,a,exp);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E tModulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MODULO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E tSuma E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E tResta E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E tMult E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E tDiv E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E tPow E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E tIgualIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E tMenorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E tMayorQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E tMenorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MENOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E tMayorQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MAYOR_IGUAL_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E tDifQ tIgual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIFERENTE_QUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E tAnd tAnd E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.AND);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E tOr E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.OR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E tDifQ E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.NOT);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E tXor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.XOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= tParA E tParC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= tId tCorcheA E tCorcheC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-1)).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR_POS_ARRAY,b);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.elementAt(CUP$SintacticoArit$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= tTrue 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("true",Tipo_operacion.TRUE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= tFalse 
            {
              Expresion RESULT =null;
		RESULT=new Operacion("false",Tipo_operacion.FALSE);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= tDoble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.NUMERO);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= tCadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=new Operacion(a,Tipo_operacion.CADENA);
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= FUNCION_DEFINIDA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$SintacticoArit$stack.peek()).value;
		RESULT=(Expresion)a;
              CUP$SintacticoArit$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoArit$stack.peek()), RESULT);
            }
          return CUP$SintacticoArit$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoArit$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoArit$do_action(
    int                        CUP$SintacticoArit$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoArit$parser,
    java.util.Stack            CUP$SintacticoArit$stack,
    int                        CUP$SintacticoArit$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoArit$do_action_part00000000(
                               CUP$SintacticoArit$act_num,
                               CUP$SintacticoArit$parser,
                               CUP$SintacticoArit$stack,
                               CUP$SintacticoArit$top);
    }
}

}
