package Analizadores;

import java.util.*; 
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;

parser code
{:  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public LinkedList<Instruccion> resultado = new LinkedList<>();
    

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}

action code
{:

:} 
terminal String tId,tDosPuntos,tPunto,tLlaveA,tPuntoComa,tLlaveC,tCadena,tCorcheA,tCorcheC;
terminal String UMENOS,tEntero,tParA,tParC,tCaracter,tIgual,tDifQ,tOr,tAnd,tXor,tComa,tSuma,tResta,tMult,tDiv,tPow,tMayorQ,tMenorQ; 

non terminal Expresion E;
non terminal Instruccion INSTRUCCION;
non terminal LinkedList<Instruccion> LISTA,LISTAINSTRUCCIONES;
non terminal Instruccion DECLARACION;

precedence left tSuma, tResta,UMENOS;
precedence left tMult, tDiv;
precedence left tPow, tMayorQ,tMenorQ,tIgual;
precedence left tAnd, tOr,tXor;

start with LISTA;

LISTA ::= LISTAINSTRUCCIONES:li {:
            parser.resultado=li;
        :}
        ;

LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES:li INSTRUCCION:ins {:
                        RESULT=li;
                        RESULT.add(ins);
                    :}
                    | INSTRUCCION:ins {:
                        RESULT = new LinkedList<>();
                        RESULT.add(ins);
                    :}
                    ;
INSTRUCCION ::= DECLARACION:a {:RESULT=a;:};

DECLARACION ::= tId:id tIgual E:exp {:RESULT= new Declaracion(id,exp);:}

            ;

E ::= tResta E:a{:RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);:}%prec UMENOS 
    | E:a tSuma E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);:}     
    | E:a tResta E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);:}
    | E:a tMult E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);:}
    | E:a tDiv E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);:}
    | E:a tPow E:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.POTENCIA);:}  
    | tId:a {:RESULT=new Operacion(a,Tipo_operacion.IDENTIFICADOR);:}
    | tEntero:a {:RESULT=new Operacion(a,Tipo_operacion.NUMERO);:}
    ;