{
	#* Funciones propias
	del desarrollador *#
	fibo=function(n){
	if(n[1]>1){
	return fibo(n[1]-1)+fibo(n[1]-2);
	}else if(n[1]==1){
	return 1;
	}else if(n[1]==0){
	return 0;
	}
	}
	print("-------------Fibonnacci----------");
	print(fibo(0));
	print(fibo(1));
	print(fibo(2));
	print(fibo(3));
	print(fibo(4));
	print(fibo(5));

	ackermann=function(m,n){
	if(m[1]==0){
	return (n[1]+1);
	}else{
	if((m[1]>0) && (n[1]==0)){
	return ackermann(m[1]-1,1);
	}else{
	no = ackermann(m[1],n[1]-1);
	nu = ackermann(m[1]-1,no[1]);
	return nu[1];
	}
	}
	}

	#Declaracion de Variable
	var = ackermann(3,6);
	print("-------------Ackeermann----------");
	print("El valor es : " + var[1]);


	factorial=function(num){
	if(num[1]==0){
	return 1;
	}else{
	return num[1]*factorial(num[1]-1);
	}
	}
	print("-------------Factorial----------");
	var[2] = factorial(5);
	print(var[2]);

	potencia=function(base,exponente){
	if(exponente[1]==0){
	return 1;
	}else if(exponente[1]<0){
	return potencia(base[1], exponente[1]+1) / base[1];
	}else{
	return  base[1] * potencia(base[1], exponente[1]-1);
	}
	}
	print("-------------Potencia----------");
	var[3]=potencia(2,2);
	print(var[3]);

	hofstaderFemale=function(n){ 
	if(n[1] < 0){
	return 0;
	}else if(n[1]==0){
	return 1;
	}else{
	return n[1] - hofstaderFemale(n[1] - 1); 
	}
	}

	print("-------------hofstaderFemale----------");
	var[4] = hofstaderFemale(0);
	print(hofstaderFemale(0));
	print(hofstaderFemale(1));
	print(hofstaderFemale(2));
	print(hofstaderFemale(3));
	print(hofstaderFemale(4));
	print(hofstaderFemale(5));

	Impar=function(num){
	if(num[1]==0){
	return 0;
	}else{
	return Par(num[1]-1);
	}
	}
	Par=function(num){
	if(num[1]==0){
	return 1;
	}else{
	return Impar(num[1]-1);
	}
	}
	print("-------------IMPAR-------------");
	print("Numero a analizar= 3");
	var[5]=Impar(3);
	if(var[5]==1){
	print("El numero 3 es Impar");
	}else{
	print("No es verdadero");
	}
	print("-------------TORRES DE HANOI-------------");
	Hanoi=function(n,origen,auxiliar,destino){
	if(n[1]==1){
	print("mover disco de " + origen[1] + " a " + destino[1]);
	}else{
	Hanoi(n[1]-1, origen[1], destino[1], auxiliar[1])
	print("mover disco de "+ origen[1] + " a " + destino[1]);
	Hanoi(n[1]-1, auxiliar[1], origen[1], destino[1])
	}
	}
	Hanoi(3,1,2,3)


	print("--------------------------------------------Utilizando Contador----------------------");
	cont=1;
	while(cont[1]<4){
	cont[1]=cont[1]+1;
	cont[cont[1]]=cont[1];
	}

	print(cont);

	#Creando vectores con la funcion c
	vary = c("Juan","Caballo","Pedor");
	nuevo = c("Si","Falaa","RTOdos");
	vecto = c(nuevo,vary);
	print(vecto);

	#Creando Listas
	Lista3 = list(1,2, 3, 4, c(5,6));
	Lista4=Lista3[5];
	print("El valor es :");
	print(Lista4);

	#Creacion de matrices
	A=matrix(c(1,2,3,4,5),5,4);
	varPrueba = A[1,];
	var2 = A[,2];
	print(A);
	prueba = A[5];
	print("Modificacion de la matriz");
	A[2,2]=24;
	print(A);
	A[2,]=8;
	print("Modificacion fila");
	print(A);
	A[,3]=7;
	print("Modificacion columna");
	print(A);

	#Grafica de pie
	vec1=c(30,40,20,60);
	vec2=c("mate","ingles","Fisica","Archivos");
	pie(vec1,vec2,"Grafica1")

	#Grafica de Barras
	h=c(20,80,10,60,100,30,25,5);
	names=c("cocaCola","Vestidos","Materias","Dinero","Musica","Estudiantes","Concierto","UVG");
	barplot(h,"Categorias","Cantidad","GraficaBarras",names)

	#Grafica de Lineas
	J=matrix(c(10,15,5,30,25,3),3,2);
	B=c(5,30,7,9,6,14);
	K=matrix(c(10,16,5,5,14,18),3,2);
	print(J);

	Vec[1]=J;
	Vec[2]=B;
	Vec[3]=K;
	plot(Vec,"0","EjeX","EjeY","Grafica Lineas")

	#Hitograma
	vecHist=c(10,15,5,8,7,4,11,18,27,14,12);
	hist(vecHist,"Histograma","Ejex",vecHist,vecHist)

	#Grafica de Dispersion
	matHis=matrix(c(10,15,5,30,25,3),3,2);
	print(matHis);
	Vec5=c(1,5);

	plot(matHis,Vec5,"Grafica de Dispersion","Ejex","Ejey",Vec5,Vec5,5>2)

	#Suma de Vectores
	SumA = c(1, 2, 3, 1, 5);
	SumB = c(2, -2, 1, 1, 8); 

	# Sumando un numero a un vector
	Print("Suma de Vectores");
	SumA = SumA + SumB; # nuevo contenido del vector A -> 
	print(SumA);

	#Multiplicacion de vectores
	Print("Multiplicacion de Vectores");
	vecMult = SumA*SumB;
	print(vecMult);

	#Division de vectores
	Print("Divion de vectores de Vectores");
	vecDiv = SumA/SumB;
	print(vecDiv);

	#Resta de vectores
	Print("Resta de vectores de Vectores");
	vecRes = SumA-SumB;
	print(vecRes);

	# Operaciones de comparación entre vectores
	# Verificando si cada elemento del vector es menor a 3
	Print("Es menor que 3");
	vecMenor = SumA < 3;
	print(vecMenor);

	# Verificando si cada elemento del vector es mayor a 3
	Print("Es mayor que 8");
	vecMayor = SumA > 8;
	print(vecMayor);

	#Operaciones logicas entre vectores
	print("true && true");
	VecTrue = vecMenor && vecMayor;
	print(VecTrue);

	#Operaciones entre matrices
	unoMatri = matrix(c(1,2,3,4,5,6),3,3);
	dosMatri = 2/unoMatri;
	print(unoMatri);
	print("------------------------");
	print(dosMatri);
	
	mat  = matrix(c(16,20,24,28,32),3,3);
	mat2 = matrix(c(8,10,12,14,16),3,3);
	print("Division entre matrices------------------------");
	nuevaMatri = mat / mat2;
	print(nuevaMatri);
	print("Mult entre matrices------------------------");
	print(mat*mat2);
	print("Suma entre matrices------------------------");
	print(mat+mat2);
	print("Resta entre matrices------------------------");
	print(mat-mat2);

	#Declarando un arreglo de 3 Dimensiones
	arra = array(c(1,2,3,4,5,6,7),c(3,2,2));

	#Funciones propias del Lenguaje
	#Funcion typeOf devuelve de que tipo de dato es la variable
	print("------Funcion typeOf------");
	print(typeOf(arra));

	#Funcion length devuelve el tamaño de una estructura
	print("------Funcion length------");
	print(length(arra));

	#Funcion nCol devuelve la cantidad de columnas de cierta matriz.
	print("------Funcion nCol------");
	print(nCol(mat));

	#Funcion NRow devuelve  la cantidad de ------filas de cierta matriz.
	print("------Funcion NRow------");
	print(NRow(mat));

	#Funcion String Length Recibe como parámetro una cadena y devuelve un entero con la longitud de la cadena
	cad = "HolaMundo";
	print("------Funcion String Length------");
	print(StringLength(cad[1]));

	#Funcion Remove devuelve  la cantidad de filas de cierta matriz.
	print("------Funcion Remove------");
	print(remove(cad[1],"Hola"));

	#Funcion ToLowerCase devuelve  una cadena en minusculas.
	cadena2="HOLAMUNDO";
	print("------Funcion ToLowerCase------");
	print(ToLowerCase(cadena2[1]));

	#Funcion ToUpperCase devuelve  una cadena en Mayusculas.
	cadnea3 = "edson";
	print("------Funcion ToUpperCase------");
	print(ToUpperCase(cadnea3[1]));

	#Funciones trunk  y round
	val2 = 5.8;
	print("------Funcion Trunk------");
	print(trunk(val2[1]));
	print("------Funcion Round------");
	print(round(val2[1]));
	print("------Funcion Suma------");
	sun = round(val2[1])+5;
	print(sun[1]);

	#Matriz +-*/ escalar
	vecTemp = c(1,2,3);
	print("Suma mat + 8--------");
	print(mat+8);
	print("Resta mat - 8--------");
	print(mat-5);
	print("Mult mat * 8--------");
	print(mat*2);
	print("Div mat / 8--------");
	print(mat/2);
	#Matriz +-*/ Vector
	print("Suma mat + vecTemp--------");
	print(mat+vecTemp);
	print("Resta mat - vecTemp--------");
	print(mat-vecTemp);
	print("Mult mat * vecTemp--------");
	print(mat*vecTemp);
	print("Div mat / vecTemp--------");
	print(mat/vecTemp);

	#Operaciones relacionales entre matrieces
	MAT = matrix(c(5,20,15),3,3);
	MAT2 = matrix(c(20,10,8),3,3);
	VECTO = c(2,30,1);
	print(MAT>MAT2);

	#Funcion para calcular la Media
	vec11 =  c(12,13,15,16,24,15,17,19,17,15);
	print("La media es: " + mean(vec11));
	print("La moda es:  " + mode(vec11));
	print("La mediana es: " + median(vec11));

	A = c(1, 2, 3, 4, 5);
	B = c(5, -2, 1, 2, 8);
	x = A < B;
	D = c(true, false, false, false, false);
	B = A | true; 
	print(B && D);

}

#*
	Para Dos Dimensiones [x][y]
	posicion_total= ((x)+(tamanoy)*(y-1)-1);

	Para Tres Dimensiones [x][y][z]
	posicion_total= ((x)+(tamanoy)*(y-1))+(tamanox)*(tamanoy)*(z - 1);

	Para Cuatro Dimensiones [x][y][z][w]
	posicion_total= ((x)+(tamanoy)*(y-1))+(tamanox)*(tamanoy)*(z - 1)+(tamanox)*(tamanoy)*(tamanoz)*(w - 1);

	Para Cinco Dimensiones [x][y][z][w][t]
	postot= ((x)+(tamanoy)*(y-1))+(tamanox)*(tamanoy)*(z - 1)+(tamanox)*(tamanoy)*(tamanoz)*(w - 1)+(tamanox)*(tamanoy)*(tamanoz)*(tamanow)*(t - 1);
*#