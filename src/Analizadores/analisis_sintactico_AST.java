
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.*;
import java_cup.runtime.Symbol;
import Views.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.Operacion.Tipo_operacion;
import Expresion.*;
import Instruccion.*;
import Entorno.Simbolo;
import Estructuras.NodoAST;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico_AST extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico_AST() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico_AST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico_AST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\006\005\000\002\007" +
    "\004\000\002\007\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\011\013\000\002\021" +
    "\005\000\002\005\005\000\002\005\003\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\020\013\000\002" +
    "\016\011\000\002\017\013\000\002\014\003\000\002\014" +
    "\004\000\002\014\005\000\002\014\004\000\002\025\011" +
    "\000\002\022\004\000\002\022\003\000\002\023\012\000" +
    "\002\024\006\000\002\013\007\000\002\012\006\000\002" +
    "\012\007\000\002\012\011\000\002\010\013\000\002\010" +
    "\012\000\002\010\012\000\002\010\013\000\002\002\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\006\000\002\002\006\000\002\002\006\000\002\002\006" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\014\000\002\002\005\000\002\002\010\000\002" +
    "\002\006\000\002\002\010\000\002\002\007\000\002\002" +
    "\007\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\024\004\001\002\000\034\004\037\006" +
    "\014\007\012\010\015\011\033\012\040\013\011\014\013" +
    "\015\020\016\025\017\035\023\007\061\032\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\004" +
    "\004\325\001\002\000\036\004\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\023\ufffe\026\ufffe\061\ufffe\001\002\000\004\041" +
    "\322\001\002\000\004\041\317\001\002\000\004\041\311" +
    "\001\002\000\004\041\306\001\002\000\004\041\303\001" +
    "\002\000\036\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\023" +
    "\ufff9\026\ufff9\061\ufff9\001\002\000\036\004\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\023\ufff6\026\ufff6\061\ufff6\001\002" +
    "\000\034\004\052\006\014\007\012\010\015\011\033\013" +
    "\011\027\051\033\047\036\055\037\057\040\050\041\056" +
    "\053\053\001\002\000\036\004\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\023\ufffd\026\ufffd\061\ufffd\001\002\000\036\004" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\023\ufff5\026\ufff5\061" +
    "\ufff5\001\002\000\036\004\037\006\014\007\012\010\015" +
    "\011\033\012\040\013\011\014\013\015\020\016\025\017" +
    "\035\023\007\026\300\061\032\001\002\000\036\004\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\023\ufffc\026\ufffc\061\ufffc" +
    "\001\002\000\004\041\270\001\002\000\004\025\267\001" +
    "\002\000\040\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\252\023\uffe6\026\uffe6\061\uffe6\001\002\000\036\004\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\023\ufffa\026\ufffa\061\ufffa" +
    "\001\002\000\036\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\023\ufff8\026\ufff8\061\ufff8\001\002\000\004\041\243\001" +
    "\002\000\004\041\240\001\002\000\036\004\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\023\ufffb\026\ufffb\061\ufffb\001\002" +
    "\000\004\041\232\001\002\000\036\004\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\023\ufff4\026\ufff4\061\ufff4\001\002\000" +
    "\010\030\172\041\132\044\173\001\002\000\004\024\041" +
    "\001\002\000\034\004\037\006\014\007\012\010\015\011" +
    "\033\012\040\013\011\014\013\015\020\016\025\017\035" +
    "\023\007\061\032\001\002\000\036\004\037\006\014\007" +
    "\012\010\015\011\033\012\040\013\011\014\013\015\020" +
    "\016\025\017\035\023\007\026\044\061\032\001\002\000" +
    "\036\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\023\uffff\026" +
    "\uffff\061\uffff\001\002\000\004\014\045\001\002\000\004" +
    "\041\046\001\002\000\034\004\052\006\014\007\012\010" +
    "\015\011\033\013\011\027\051\033\047\036\055\037\057" +
    "\040\050\041\056\053\053\001\002\000\044\021\uffb9\025" +
    "\uffb9\031\uffb9\035\uffb9\042\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\001\002\000\044\021\uffba\025\uffba" +
    "\031\uffba\035\uffba\042\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\001\002\000\044\021\uffb8\025\uffb8\031" +
    "\uffb8\035\uffb8\042\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\001\002\000\052\021\uffbd\025\uffbd\030\130" +
    "\031\uffbd\035\uffbd\041\132\042\uffbd\044\131\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\034\004" +
    "\052\006\014\007\012\010\015\011\033\013\011\027\051" +
    "\033\047\036\055\037\057\040\050\041\056\053\053\001" +
    "\002\000\044\021\uffb6\025\uffb6\031\uffb6\035\uffb6\042\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002" +
    "\000\044\021\uffbc\025\uffbc\031\uffbc\035\uffbc\042\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002\000" +
    "\034\004\052\006\014\007\012\010\015\011\033\013\011" +
    "\027\051\033\047\036\055\037\057\040\050\041\056\053" +
    "\053\001\002\000\044\021\uffbb\025\uffbb\031\uffbb\035\uffbb" +
    "\042\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\001\002\000\044\021\uffb7\025\uffb7\031\uffb7\035\uffb7\042" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\001" +
    "\002\000\036\021\076\035\074\042\070\045\077\046\073" +
    "\047\063\050\064\052\067\053\066\054\072\055\075\056" +
    "\065\057\071\060\062\001\002\000\036\004\052\006\014" +
    "\007\012\010\015\011\033\013\011\027\051\033\047\036" +
    "\055\037\057\040\050\041\056\044\122\053\053\001\002" +
    "\000\004\047\120\001\002\000\034\004\052\006\014\007" +
    "\012\010\015\011\033\013\011\027\051\033\047\036\055" +
    "\037\057\040\050\041\056\053\053\001\002\000\034\004" +
    "\052\006\014\007\012\010\015\011\033\013\011\027\051" +
    "\033\047\036\055\037\057\040\050\041\056\053\053\001" +
    "\002\000\034\004\052\006\014\007\012\010\015\011\033" +
    "\013\011\027\051\033\047\036\055\037\057\040\050\041" +
    "\056\053\053\001\002\000\034\004\052\006\014\007\012" +
    "\010\015\011\033\013\011\027\051\033\047\036\055\037" +
    "\057\040\050\041\056\053\053\001\002\000\004\025\113" +
    "\001\002\000\036\004\052\006\014\007\012\010\015\011" +
    "\033\013\011\027\051\033\047\036\055\037\057\040\050" +
    "\041\056\044\110\053\053\001\002\000\034\004\052\006" +
    "\014\007\012\010\015\011\033\013\011\027\051\033\047" +
    "\036\055\037\057\040\050\041\056\053\053\001\002\000" +
    "\034\004\052\006\014\007\012\010\015\011\033\013\011" +
    "\027\051\033\047\036\055\037\057\040\050\041\056\053" +
    "\053\001\002\000\034\004\052\006\014\007\012\010\015" +
    "\011\033\013\011\027\051\033\047\036\055\037\057\040" +
    "\050\041\056\053\053\001\002\000\034\004\052\006\014" +
    "\007\012\010\015\011\033\013\011\027\051\033\047\036" +
    "\055\037\057\040\050\041\056\053\053\001\002\000\034" +
    "\004\052\006\014\007\012\010\015\011\033\013\011\027" +
    "\051\033\047\036\055\037\057\040\050\041\056\053\053" +
    "\001\002\000\036\004\052\006\014\007\012\010\015\011" +
    "\033\013\011\027\051\033\047\036\055\037\057\040\050" +
    "\041\056\044\100\053\053\001\002\000\034\004\052\006" +
    "\014\007\012\010\015\011\033\013\011\027\051\033\047" +
    "\036\055\037\057\040\050\041\056\053\053\001\002\000" +
    "\044\021\uffc6\025\uffc6\031\uffc6\035\uffc6\042\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000\044" +
    "\021\uffc9\025\uffc9\031\uffc9\035\uffc9\042\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000\044\021" +
    "\uffd4\025\uffd4\031\uffd4\035\uffd4\042\uffd4\045\077\046\073" +
    "\047\063\050\064\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\065\057\071\060\062\001\002\000\044\021\uffd0" +
    "\025\uffd0\031\uffd0\035\uffd0\042\uffd0\045\077\046\073\047" +
    "\063\050\064\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\065\057\071\060\062\001\002\000\044\021\uffce\025" +
    "\uffce\031\uffce\035\uffce\042\uffce\045\077\046\073\047\063" +
    "\050\064\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\065\057\071\060\062\001\002\000\044\021\uffc7\025\uffc7" +
    "\031\uffc7\035\uffc7\042\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\001\002\000\044\021\uffd1\025\uffd1\031" +
    "\uffd1\035\uffd1\042\uffd1\045\077\046\073\047\063\050\064" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\065\057" +
    "\071\060\062\001\002\000\034\004\052\006\014\007\012" +
    "\010\015\011\033\013\011\027\051\033\047\036\055\037" +
    "\057\040\050\041\056\053\053\001\002\000\044\021\uffcc" +
    "\025\uffcc\031\uffcc\035\uffcc\042\uffcc\045\077\046\073\047" +
    "\063\050\064\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\001\002\000\044\021\uffca\025" +
    "\uffca\031\uffca\035\uffca\042\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\001\002\000\036\004\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\023\uffe7\026\uffe7\061\uffe7\001\002" +
    "\000\044\021\076\025\uffd3\031\uffd3\035\074\042\uffd3\045" +
    "\077\046\073\047\063\050\064\051\uffd3\052\uffd3\053\uffd3" +
    "\054\072\055\075\056\065\057\071\060\062\001\002\000" +
    "\044\021\076\025\uffd2\031\uffd2\035\074\042\uffd2\045\077" +
    "\046\073\047\063\050\064\051\uffd2\052\uffd2\053\uffd2\054" +
    "\072\055\075\056\065\057\071\060\062\001\002\000\044" +
    "\021\uffcf\025\uffcf\031\uffcf\035\uffcf\042\uffcf\045\077\046" +
    "\073\047\063\050\064\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\044\021" +
    "\uffc5\025\uffc5\031\uffc5\035\uffc5\042\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000\034\004\052" +
    "\006\014\007\012\010\015\011\033\013\011\027\051\033" +
    "\047\036\055\037\057\040\050\041\056\053\053\001\002" +
    "\000\044\021\uffc8\025\uffc8\031\uffc8\035\uffc8\042\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\001\002\000" +
    "\034\004\052\006\014\007\012\010\015\011\033\013\011" +
    "\027\051\033\047\036\055\037\057\040\050\041\056\053" +
    "\053\001\002\000\044\021\uffcd\025\uffcd\031\uffcd\035\uffcd" +
    "\042\uffcd\045\077\046\073\047\063\050\064\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\001\002\000\044\021\uffcb\025\uffcb\031\uffcb\035\uffcb\042" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\001" +
    "\002\000\036\021\076\035\074\042\126\045\077\046\073" +
    "\047\063\050\064\052\067\053\066\054\072\055\075\056" +
    "\065\057\071\060\062\001\002\000\044\021\uffc3\025\uffc3" +
    "\031\uffc3\035\uffc3\042\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\001\002\000\044\021\uffd5\025\uffd5\031" +
    "\uffd5\035\uffd5\042\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\001\002\000\040\004\052\006\014\007\012" +
    "\010\015\011\033\013\011\027\051\030\150\033\047\036" +
    "\055\037\057\040\050\041\056\051\151\053\053\001\002" +
    "\000\004\034\140\001\002\000\034\004\052\006\014\007" +
    "\012\010\015\011\033\013\011\027\051\033\047\036\055" +
    "\037\057\040\050\041\056\053\053\001\002\000\006\042" +
    "\136\051\135\001\002\000\040\021\076\035\074\042\ufff0" +
    "\045\077\046\073\047\063\050\064\051\ufff0\052\067\053" +
    "\066\054\072\055\075\056\065\057\071\060\062\001\002" +
    "\000\034\004\052\006\014\007\012\010\015\011\033\013" +
    "\011\027\051\033\047\036\055\037\057\040\050\041\056" +
    "\053\053\001\002\000\044\021\uffef\025\uffef\031\uffef\035" +
    "\uffef\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060" +
    "\uffef\001\002\000\040\021\076\035\074\042\ufff1\045\077" +
    "\046\073\047\063\050\064\051\ufff1\052\067\053\066\054" +
    "\072\055\075\056\065\057\071\060\062\001\002\000\004" +
    "\041\141\001\002\000\034\004\052\006\014\007\012\010" +
    "\015\011\033\013\011\027\051\033\047\036\055\037\057" +
    "\040\050\041\056\053\053\001\002\000\006\042\143\051" +
    "\135\001\002\000\004\024\144\001\002\000\034\004\037" +
    "\006\014\007\012\010\015\011\033\012\040\013\011\014" +
    "\013\015\020\016\025\017\035\023\007\061\032\001\002" +
    "\000\036\004\037\006\014\007\012\010\015\011\033\012" +
    "\040\013\011\014\013\015\020\016\025\017\035\023\007" +
    "\026\146\061\032\001\002\000\100\004\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\021\uffe9\023\uffe9\025\uffe9\026\uffe9\031" +
    "\uffe9\035\uffe9\042\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\001\002\000\040\021\076\031\157" +
    "\035\074\045\077\046\073\047\063\050\064\051\160\052" +
    "\067\053\066\054\072\055\075\056\065\057\071\060\062" +
    "\001\002\000\034\004\052\006\014\007\012\010\015\011" +
    "\033\013\011\027\051\033\047\036\055\037\057\040\050" +
    "\041\056\053\053\001\002\000\034\004\052\006\014\007" +
    "\012\010\015\011\033\013\011\027\051\033\047\036\055" +
    "\037\057\040\050\041\056\053\053\001\002\000\036\021" +
    "\076\031\153\035\074\045\077\046\073\047\063\050\064" +
    "\052\067\053\066\054\072\055\075\056\065\057\071\060" +
    "\062\001\002\000\044\021\uffbe\025\uffbe\031\uffbe\035\uffbe" +
    "\042\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\001\002\000\036\021\076\031\155\035\074\045\077\046" +
    "\073\047\063\050\064\052\067\053\066\054\072\055\075" +
    "\056\065\057\071\060\062\001\002\000\004\031\156\001" +
    "\002\000\044\021\uffc2\025\uffc2\031\uffc2\035\uffc2\042\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002" +
    "\000\046\021\uffc1\025\uffc1\030\164\031\uffc1\035\uffc1\042" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\001" +
    "\002\000\036\004\052\006\014\007\012\010\015\011\033" +
    "\013\011\027\051\031\161\033\047\036\055\037\057\040" +
    "\050\041\056\053\053\001\002\000\044\021\uffbf\025\uffbf" +
    "\031\uffbf\035\uffbf\042\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\001\002\000\036\021\076\031\163\035" +
    "\074\045\077\046\073\047\063\050\064\052\067\053\066" +
    "\054\072\055\075\056\065\057\071\060\062\001\002\000" +
    "\044\021\uffc0\025\uffc0\031\uffc0\035\uffc0\042\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\001\002\000\034" +
    "\004\052\006\014\007\012\010\015\011\033\013\011\027" +
    "\051\033\047\036\055\037\057\040\050\041\056\053\053" +
    "\001\002\000\036\021\076\031\166\035\074\045\077\046" +
    "\073\047\063\050\064\052\067\053\066\054\072\055\075" +
    "\056\065\057\071\060\062\001\002\000\004\030\167\001" +
    "\002\000\034\004\052\006\014\007\012\010\015\011\033" +
    "\013\011\027\051\033\047\036\055\037\057\040\050\041" +
    "\056\053\053\001\002\000\036\021\076\031\171\035\074" +
    "\045\077\046\073\047\063\050\064\052\067\053\066\054" +
    "\072\055\075\056\065\057\071\060\062\001\002\000\044" +
    "\021\uffc4\025\uffc4\031\uffc4\035\uffc4\042\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000\040\004" +
    "\052\006\014\007\012\010\015\011\033\013\011\027\051" +
    "\030\177\033\047\036\055\037\057\040\050\041\056\051" +
    "\200\053\053\001\002\000\036\004\052\006\014\007\012" +
    "\010\015\011\033\013\011\027\051\033\047\034\140\036" +
    "\055\037\057\040\050\041\056\053\053\001\002\000\036" +
    "\021\076\025\175\035\074\045\077\046\073\047\063\050" +
    "\064\052\067\053\066\054\072\055\075\056\065\057\071" +
    "\060\062\001\002\000\036\004\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\023\uffdc\026\uffdc\061\uffdc\001\002\000\040\021" +
    "\076\031\214\035\074\045\077\046\073\047\063\050\064" +
    "\051\215\052\067\053\066\054\072\055\075\056\065\057" +
    "\071\060\062\001\002\000\034\004\052\006\014\007\012" +
    "\010\015\011\033\013\011\027\051\033\047\036\055\037" +
    "\057\040\050\041\056\053\053\001\002\000\034\004\052" +
    "\006\014\007\012\010\015\011\033\013\011\027\051\033" +
    "\047\036\055\037\057\040\050\041\056\053\053\001\002" +
    "\000\036\021\076\031\202\035\074\045\077\046\073\047" +
    "\063\050\064\052\067\053\066\054\072\055\075\056\065" +
    "\057\071\060\062\001\002\000\004\044\203\001\002\000" +
    "\034\004\052\006\014\007\012\010\015\011\033\013\011" +
    "\027\051\033\047\036\055\037\057\040\050\041\056\053" +
    "\053\001\002\000\036\021\076\025\205\035\074\045\077" +
    "\046\073\047\063\050\064\052\067\053\066\054\072\055" +
    "\075\056\065\057\071\060\062\001\002\000\036\004\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\026\uffd7\061\uffd7" +
    "\001\002\000\036\021\076\031\207\035\074\045\077\046" +
    "\073\047\063\050\064\052\067\053\066\054\072\055\075" +
    "\056\065\057\071\060\062\001\002\000\004\031\210\001" +
    "\002\000\004\044\211\001\002\000\034\004\052\006\014" +
    "\007\012\010\015\011\033\013\011\027\051\033\047\036" +
    "\055\037\057\040\050\041\056\053\053\001\002\000\036" +
    "\021\076\025\213\035\074\045\077\046\073\047\063\050" +
    "\064\052\067\053\066\054\072\055\075\056\065\057\071" +
    "\060\062\001\002\000\036\004\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\023\uffd6\026\uffd6\061\uffd6\001\002\000\004\044" +
    "\227\001\002\000\036\004\052\006\014\007\012\010\015" +
    "\011\033\013\011\027\051\031\216\033\047\036\055\037" +
    "\057\040\050\041\056\053\053\001\002\000\004\044\224" +
    "\001\002\000\036\021\076\031\220\035\074\045\077\046" +
    "\073\047\063\050\064\052\067\053\066\054\072\055\075" +
    "\056\065\057\071\060\062\001\002\000\004\044\221\001" +
    "\002\000\034\004\052\006\014\007\012\010\015\011\033" +
    "\013\011\027\051\033\047\036\055\037\057\040\050\041" +
    "\056\053\053\001\002\000\036\021\076\025\223\035\074" +
    "\045\077\046\073\047\063\050\064\052\067\053\066\054" +
    "\072\055\075\056\065\057\071\060\062\001\002\000\036" +
    "\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\023\uffd9\026\uffd9" +
    "\061\uffd9\001\002\000\034\004\052\006\014\007\012\010" +
    "\015\011\033\013\011\027\051\033\047\036\055\037\057" +
    "\040\050\041\056\053\053\001\002\000\036\021\076\025" +
    "\226\035\074\045\077\046\073\047\063\050\064\052\067" +
    "\053\066\054\072\055\075\056\065\057\071\060\062\001" +
    "\002\000\036\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\023" +
    "\uffd8\026\uffd8\061\uffd8\001\002\000\034\004\052\006\014" +
    "\007\012\010\015\011\033\013\011\027\051\033\047\036" +
    "\055\037\057\040\050\041\056\053\053\001\002\000\036" +
    "\021\076\025\231\035\074\045\077\046\073\047\063\050" +
    "\064\052\067\053\066\054\072\055\075\056\065\057\071" +
    "\060\062\001\002\000\036\004\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\023\uffda\026\uffda\061\uffda\001\002\000\034\004" +
    "\052\006\014\007\012\010\015\011\033\013\011\027\051" +
    "\033\047\036\055\037\057\040\050\041\056\053\053\001" +
    "\002\000\036\021\076\035\074\042\234\045\077\046\073" +
    "\047\063\050\064\052\067\053\066\054\072\055\075\056" +
    "\065\057\071\060\062\001\002\000\004\024\235\001\002" +
    "\000\034\004\037\006\014\007\012\010\015\011\033\012" +
    "\040\013\011\014\013\015\020\016\025\017\035\023\007" +
    "\061\032\001\002\000\036\004\037\006\014\007\012\010" +
    "\015\011\033\012\040\013\011\014\013\015\020\016\025" +
    "\017\035\023\007\026\237\061\032\001\002\000\040\004" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\023\uffe2\026" +
    "\uffe2\061\uffe2\001\002\000\034\004\052\006\014\007\012" +
    "\010\015\011\033\013\011\027\051\033\047\036\055\037" +
    "\057\040\050\041\056\053\053\001\002\000\006\042\242" +
    "\051\135\001\002\000\044\021\uffeb\025\uffeb\031\uffeb\035" +
    "\uffeb\042\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\001\002\000\034\004\052\006\014\007\012\010\015" +
    "\011\033\013\011\027\051\033\047\036\055\037\057\040" +
    "\050\041\056\053\053\001\002\000\036\021\076\035\074" +
    "\042\245\045\077\046\073\047\063\050\064\052\067\053" +
    "\066\054\072\055\075\056\065\057\071\060\062\001\002" +
    "\000\004\025\246\001\002\000\036\004\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\023\uffdd\026\uffdd\061\uffdd\001\002\000" +
    "\036\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\026" +
    "\uffe3\061\uffe3\001\002\000\040\004\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\023\uffe0\026\uffe0\061\uffe0\001\002" +
    "\000\040\004\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\252" +
    "\023\uffe5\026\uffe5\061\uffe5\001\002\000\006\017\254\024" +
    "\253\001\002\000\034\004\037\006\014\007\012\010\015" +
    "\011\033\012\040\013\011\014\013\015\020\016\025\017" +
    "\035\023\007\061\032\001\002\000\004\041\255\001\002" +
    "\000\034\004\052\006\014\007\012\010\015\011\033\013" +
    "\011\027\051\033\047\036\055\037\057\040\050\041\056" +
    "\053\053\001\002\000\036\021\076\035\074\042\257\045" +
    "\077\046\073\047\063\050\064\052\067\053\066\054\072" +
    "\055\075\056\065\057\071\060\062\001\002\000\004\024" +
    "\260\001\002\000\034\004\037\006\014\007\012\010\015" +
    "\011\033\012\040\013\011\014\013\015\020\016\025\017" +
    "\035\023\007\061\032\001\002\000\036\004\037\006\014" +
    "\007\012\010\015\011\033\012\040\013\011\014\013\015" +
    "\020\016\025\017\035\023\007\026\262\061\032\001\002" +
    "\000\040\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\023\uffdf\026\uffdf\061\uffdf\001\002\000\036\004\037\006" +
    "\014\007\012\010\015\011\033\012\040\013\011\014\013" +
    "\015\020\016\025\017\035\023\007\026\264\061\032\001" +
    "\002\000\036\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\023" +
    "\uffde\026\uffde\061\uffde\001\002\000\036\004\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\023\uffe4\026\uffe4\061\uffe4\001\002" +
    "\000\040\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\023\uffe1\026\uffe1\061\uffe1\001\002\000\036\004\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\023\ufff7\026\ufff7\061\ufff7\001" +
    "\002\000\004\004\271\001\002\000\004\005\272\001\002" +
    "\000\034\004\052\006\014\007\012\010\015\011\033\013" +
    "\011\027\051\033\047\036\055\037\057\040\050\041\056" +
    "\053\053\001\002\000\036\021\076\035\074\042\274\045" +
    "\077\046\073\047\063\050\064\052\067\053\066\054\072" +
    "\055\075\056\065\057\071\060\062\001\002\000\004\024" +
    "\275\001\002\000\034\004\037\006\014\007\012\010\015" +
    "\011\033\012\040\013\011\014\013\015\020\016\025\017" +
    "\035\023\007\061\032\001\002\000\036\004\037\006\014" +
    "\007\012\010\015\011\033\012\040\013\011\014\013\015" +
    "\020\016\025\017\035\023\007\026\277\061\032\001\002" +
    "\000\036\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\023\ufff3" +
    "\026\ufff3\061\ufff3\001\002\000\004\002\000\001\002\000" +
    "\036\021\076\025\302\035\074\045\077\046\073\047\063" +
    "\050\064\052\067\053\066\054\072\055\075\056\065\057" +
    "\071\060\062\001\002\000\036\004\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\023\ufff2\026\ufff2\061\ufff2\001\002\000\034" +
    "\004\052\006\014\007\012\010\015\011\033\013\011\027" +
    "\051\033\047\036\055\037\057\040\050\041\056\053\053" +
    "\001\002\000\006\042\305\051\135\001\002\000\044\021" +
    "\uffea\025\uffea\031\uffea\035\uffea\042\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\001\002\000\034\004\052" +
    "\006\014\007\012\010\015\011\033\013\011\027\051\033" +
    "\047\036\055\037\057\040\050\041\056\053\053\001\002" +
    "\000\006\042\310\051\135\001\002\000\044\021\uffed\025" +
    "\uffed\031\uffed\035\uffed\042\uffed\045\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\001\002\000\034\004\052\006\014" +
    "\007\012\010\015\011\033\013\011\027\051\033\047\036" +
    "\055\037\057\040\050\041\056\053\053\001\002\000\036" +
    "\021\076\035\074\042\313\045\077\046\073\047\063\050" +
    "\064\052\067\053\066\054\072\055\075\056\065\057\071" +
    "\060\062\001\002\000\004\024\314\001\002\000\034\004" +
    "\037\006\014\007\012\010\015\011\033\012\040\013\011" +
    "\014\013\015\020\016\025\017\035\023\007\061\032\001" +
    "\002\000\036\004\037\006\014\007\012\010\015\011\033" +
    "\012\040\013\011\014\013\015\020\016\025\017\035\023" +
    "\007\026\316\061\032\001\002\000\036\004\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\023\uffe8\026\uffe8\061\uffe8\001\002" +
    "\000\034\004\052\006\014\007\012\010\015\011\033\013" +
    "\011\027\051\033\047\036\055\037\057\040\050\041\056" +
    "\053\053\001\002\000\006\042\321\051\135\001\002\000" +
    "\044\021\uffec\025\uffec\031\uffec\035\uffec\042\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\001\002\000\034" +
    "\004\052\006\014\007\012\010\015\011\033\013\011\027" +
    "\051\033\047\036\055\037\057\040\050\041\056\053\053" +
    "\001\002\000\006\042\324\051\135\001\002\000\044\021" +
    "\uffee\025\uffee\031\uffee\035\uffee\042\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\057\uffee\060\uffee\001\002\000\004\044\326" +
    "\001\002\000\034\004\052\006\014\007\012\010\015\011" +
    "\033\013\011\027\051\033\047\036\055\037\057\040\050" +
    "\041\056\053\053\001\002\000\036\021\076\025\330\035" +
    "\074\045\077\046\073\047\063\050\064\052\067\053\066" +
    "\054\072\055\075\056\065\057\071\060\062\001\002\000" +
    "\036\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\023\uffdb\026" +
    "\uffdb\061\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\006\004\001\001\000\034\003\025\004" +
    "\007\007\022\010\027\011\035\012\020\013\023\014\033" +
    "\016\015\017\030\020\016\021\021\025\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\300\003\057\020\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\025" +
    "\004\042\010\027\011\035\012\020\013\023\014\033\016" +
    "\015\017\030\020\016\021\021\025\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\250\023\247\024\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\025\004\007\007\041\010" +
    "\027\011\035\012\020\013\023\014\033\016\015\017\030" +
    "\020\016\021\021\025\026\001\001\000\032\003\025\004" +
    "\042\010\027\011\035\012\020\013\023\014\033\016\015" +
    "\017\030\020\016\021\021\025\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\060" +
    "\003\057\020\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\126" +
    "\003\057\020\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\124\003\057\020\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\122\003\057\020\053\001\001\000\002\001\001\000\010" +
    "\002\116\003\057\020\053\001\001\000\010\002\115\003" +
    "\057\020\053\001\001\000\010\002\114\003\057\020\053" +
    "\001\001\000\010\002\113\003\057\020\053\001\001\000" +
    "\002\001\001\000\010\002\110\003\057\020\053\001\001" +
    "\000\010\002\106\003\057\020\053\001\001\000\010\002" +
    "\105\003\057\020\053\001\001\000\010\002\104\003\057" +
    "\020\053\001\001\000\010\002\103\003\057\020\053\001" +
    "\001\000\010\002\102\003\057\020\053\001\001\000\010" +
    "\002\100\003\057\020\053\001\001\000\010\002\101\003" +
    "\057\020\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\111\003\057" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\120\003\057\020" +
    "\053\001\001\000\002\001\001\000\010\002\123\003\057" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\146\003\057\020\053\001\001\000\002\001\001\000" +
    "\012\002\133\003\057\005\132\020\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\136\003\057\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\133\003\057\005\141\020\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\025" +
    "\004\007\007\144\010\027\011\035\012\020\013\023\014" +
    "\033\016\015\017\030\020\016\021\021\025\026\001\001" +
    "\000\032\003\025\004\042\010\027\011\035\012\020\013" +
    "\023\014\033\016\015\017\030\020\016\021\021\025\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\153\003\057\020\053\001\001\000\010\002\151\003\057" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\161\003\057\020\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\164\003\057\020\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\167\003\057\020\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\175\003" +
    "\057\020\053\001\001\000\010\002\173\003\057\020\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\205\003\057\020\053\001\001\000\010" +
    "\002\200\003\057\020\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\203\003\057\020\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\211\003\057" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\216\003\057\020\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\221\003\057\020\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\224\003\057\020\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\227" +
    "\003\057\020\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\232\003\057\020\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\025\004\007\007" +
    "\235\010\027\011\035\012\020\013\023\014\033\016\015" +
    "\017\030\020\016\021\021\025\026\001\001\000\032\003" +
    "\025\004\042\010\027\011\035\012\020\013\023\014\033" +
    "\016\015\017\030\020\016\021\021\025\026\001\001\000" +
    "\002\001\001\000\012\002\133\003\057\005\240\020\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\243\003\057\020\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\265\024\264\001\001\000\002\001\001" +
    "\000\034\003\025\004\007\007\262\010\027\011\035\012" +
    "\020\013\023\014\033\016\015\017\030\020\016\021\021" +
    "\025\026\001\001\000\002\001\001\000\010\002\255\003" +
    "\057\020\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\025\004\007\007\260\010\027\011\035\012" +
    "\020\013\023\014\033\016\015\017\030\020\016\021\021" +
    "\025\026\001\001\000\032\003\025\004\042\010\027\011" +
    "\035\012\020\013\023\014\033\016\015\017\030\020\016" +
    "\021\021\025\026\001\001\000\002\001\001\000\032\003" +
    "\025\004\042\010\027\011\035\012\020\013\023\014\033" +
    "\016\015\017\030\020\016\021\021\025\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\272\003\057\020\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\025\004\007\007\275\010\027\011" +
    "\035\012\020\013\023\014\033\016\015\017\030\020\016" +
    "\021\021\025\026\001\001\000\032\003\025\004\042\010" +
    "\027\011\035\012\020\013\023\014\033\016\015\017\030" +
    "\020\016\021\021\025\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\133\003\057\005\303\020\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\133\003\057\005\306" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\311\003\057\020\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\025\004\007\007\314\010" +
    "\027\011\035\012\020\013\023\014\033\016\015\017\030" +
    "\020\016\021\021\025\026\001\001\000\032\003\025\004" +
    "\042\010\027\011\035\012\020\013\023\014\033\016\015" +
    "\017\030\020\016\021\021\025\026\001\001\000\002\001" +
    "\001\000\012\002\133\003\057\005\317\020\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\133\003" +
    "\057\005\322\020\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\326\003\057\020" +
    "\053\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico_AST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico_AST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico_AST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    //public Panel resultado;
    public NodoAST raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico_AST$actions {




  private final analisis_sintactico_AST parser;

  /** Constructor */
  CUP$analisis_sintactico_AST$actions(analisis_sintactico_AST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_AST$do_action_part00000000(
    int                        CUP$analisis_sintactico_AST$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_AST$parser,
    java.util.Stack            CUP$analisis_sintactico_AST$stack,
    int                        CUP$analisis_sintactico_AST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico_AST$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico_AST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LISTA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST start_val = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico_AST$parser.done_parsing();
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LISTA ::= tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		
            NodoAST padre = new NodoAST("LISTA");
            padre.add(li);
            parser.raiz=padre;
        
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTA",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                        NodoAST nodo = new NodoAST("LISTAINSTRUCCIONES");
                        nodo.add(li);
                        nodo.add(ins);
                        RESULT=nodo;
                    
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              NodoAST RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST ins = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                        RESULT=ins;
                    
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");nodo.add(a);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");nodo.add(a);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ASIGNACION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= WHILE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DO_WHILE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= LLAMADA_FUNCION tPuntoComa 
            {
              NodoAST RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= FUNCION_DEFINIDA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= RETURN 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FOR 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("INSTRUCCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FOR ::= tFor tParA tId tIn E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		NodoAST nodo = new NodoAST("FOR");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RETURN ::= tReturn E tPuntoComa 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("RETURN");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTAEXPR ::= LISTAEXPR tComa E 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                   NodoAST nodo = new NodoAST("LISTAEXPR");
                        nodo.add(li);
                        nodo.add(a);
                        RESULT=nodo; 
                
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTAEXPR ::= E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		
                    RESULT=a;
                
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LISTAEXPR",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA_FUNCION ::= tId tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST e1 = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LLAMADA_FUNCION ::= tC tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA_FUNCION ::= tPie tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA_FUNCION ::= tBarplot tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA_FUNCION ::= tList tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LLAMADA_FUNCION ::= tMatrix tParA LISTAEXPR tParC 
            {
              NodoAST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST el = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("LLAMADA_FUNCION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION_DEFINIDA ::= tId tIgual tFunction tParA LISTAEXPR tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("FUNCION_DEFINIDA");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("FUNCION_DEFINIDA",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHILE ::= tWhile tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("WHILE");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DO_WHILE ::= tDo tLlaveA LISTAINSTRUCCIONES tLlaveC tWhile tParA E tParC tPuntoComa 
            {
              NodoAST RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).right;
		NodoAST li = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		NodoAST nodo = new NodoAST("DO_WHILE");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DO_WHILE",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SI ::= instruccion_if 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SI ::= instruccion_if instrucciones_elseif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SI ::= instruccion_if instrucciones_elseif instruccion_else 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SI ::= instruccion_if instruccion_else 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SI");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("SI",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion_if ::= tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("instruccion_if");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instruccion_if",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones_elseif ::= instrucciones_elseif instruccion_elseif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("instrucciones_elseif");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones_elseif ::= instruccion_elseif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("instrucciones_elseif");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instrucciones_elseif",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion_elseif ::= tElse tIf tParA E tParC tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("instruccion_elseif");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instruccion_elseif",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion_else ::= tElse tLlaveA LISTAINSTRUCCIONES tLlaveC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("instruccion_else ");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("instruccion_else",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMPRIMIR ::= tPrint tParA E tParC tPuntoComa 
            {
              NodoAST RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		NodoAST nodo = new NodoAST("IMPRIMIR");
            nodo.add(new NodoAST("print"));
            nodo.add(new NodoAST("("));
            nodo.add(exp);
            nodo.add(new NodoAST(")"));
            nodo.add(new NodoAST(";"));
            RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= tId tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("DECLARACION");nodo.add(new NodoAST(id));nodo.add(new NodoAST("="));nodo.add(exp);nodo.add(new NodoAST(";"));RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= tPunto tId tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("DECLARACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= tId tCorcheA E tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("DECLARACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= tId tCorcheA E tComa E tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= tId tCorcheA E tComa tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= tId tCorcheA tComa E tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= tId tCorcheA tCorcheA E tCorcheC tCorcheC tIgual E tPuntoComa 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST exp = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo = new NodoAST("ASIGNACION");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= tResta E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("-");RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E tModulo E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MODULO");nodo.add(a);nodo.add(new NodoAST("%"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E tSuma E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("SUMA");nodo.add(a);nodo.add(new NodoAST("+"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E tResta E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("RESTA");nodo.add(a);nodo.add(new NodoAST("-"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E tMult E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MULTP");nodo.add(a);nodo.add(new NodoAST("*"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E tDiv E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("DIV");nodo.add(a);nodo.add(new NodoAST("/"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E tPow E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("POW");nodo.add(a);nodo.add(new NodoAST("&"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E tIgualIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("IGUAL");nodo.add(a);nodo.add(new NodoAST("=="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E tMenorQ E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MATORQ");nodo.add(a);nodo.add(new NodoAST("<"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E tMayorQ E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MENORQ");nodo.add(a);nodo.add(new NodoAST(">"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E tMenorQ tIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MENORQIGUAL");nodo.add(a);nodo.add(new NodoAST("<="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E tMayorQ tIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("MAYORQIGUAL");nodo.add(a);nodo.add(new NodoAST(">="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E tDifQ tIgual E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("DIFQ");nodo.add(a);nodo.add(new NodoAST("!="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E tAnd tAnd E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("AND");nodo.add(a);nodo.add(new NodoAST("&&"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E tOr E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("OR");nodo.add(a);nodo.add(new NodoAST("|"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E tDifQ E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("DIF");nodo.add(a);nodo.add(new NodoAST("!"));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E tXor E 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		NodoAST nodo = new NodoAST("XOR");nodo.add(a);nodo.add(new NodoAST("<="));nodo.add(b);RESULT=nodo;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= tId tCorcheA E tCorcheC tCorcheA E tCorcheC tCorcheA E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		NodoAST nodo =new NodoAST("POSARRAY[][][]");nodo.add(new NodoAST(a));nodo.add(c);
    nodo.add(d);
    RESULT = nodo;
    
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= tParA E tParC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=a;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= tId tCorcheA tCorcheA E tCorcheC tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		RESULT=new NodoAST("id[[1]]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= tId tCorcheA E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=new NodoAST("id[1]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= tId tCorcheA E tComa E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=new NodoAST("id[1,2]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= tId tCorcheA E tComa tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-2)).value;
		RESULT=new NodoAST("id[1,]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= tId tCorcheA tComa E tCorcheC 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-1)).value;
		RESULT=new NodoAST("id[,1]");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.elementAt(CUP$analisis_sintactico_AST$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= tId 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= tEntero 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= tTrue 
            {
              NodoAST RESULT =null;
		RESULT=new NodoAST("true");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= tFalse 
            {
              NodoAST RESULT =null;
		RESULT=new NodoAST("false");
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= tDoble 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= tCadena 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=new NodoAST(a);
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= LLAMADA_FUNCION 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=a;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= FUNCION_DEFINIDA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$analisis_sintactico_AST$stack.peek()).value;
		RESULT=a;
              CUP$analisis_sintactico_AST$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_AST$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_AST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico_AST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_AST$do_action(
    int                        CUP$analisis_sintactico_AST$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_AST$parser,
    java.util.Stack            CUP$analisis_sintactico_AST$stack,
    int                        CUP$analisis_sintactico_AST$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico_AST$do_action_part00000000(
                               CUP$analisis_sintactico_AST$act_num,
                               CUP$analisis_sintactico_AST$parser,
                               CUP$analisis_sintactico_AST$stack,
                               CUP$analisis_sintactico_AST$top);
    }
}

}
